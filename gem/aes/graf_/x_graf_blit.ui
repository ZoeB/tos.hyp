!iflang [english]

!begin_node x_graf_blit

(!begin_liste) [Availability]

!item [Name:]
ØBlit areaÆ

!item [Opcode:]
28976

!item [Syntax:]
int16_t x_graf_blit( GRECT *source, GRECT *dest );

!item [Description:]
!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [source]
Address of source rectangle or NULL
!item [dest]
Address of destination rectangle or NULL
!end_xlist

If (!I)source(!i) and (!I)dest(!i) are both non-zero, then the function simply blits the
screen data from one rectangle to the other.

If (!I)dest(!i) is NULL, then the operation saves the area of the screen specified
by source in its internal buffer. When the function ise=ater called with
source NULL and dest properly set, it will restore the area in the (new)
location.

The internal buffer is large enough to hold 1/2 of the current screen.
Exceeding this will cause Geneva to try to allocate enough memory to hold
the screen data. If this fails, a zero will be returned.
Since this buffer is also used by Geneva to hold the screen data for
alerts and menus, and also by the item selector, you should always
surround code which uses x_graf_blit with wind_update calls.

This example displays a dialog and uses a blit to restore what was
underneath it:
!begin_verbatim
OBJECT *tree;
GRECT r;

rsrc_gaddr( 0, 0, &tree );                    /* get dialog        */
form_center( tree, &r.x, &r.y, &r.w, &r.h );  /* center it         */
wind_update( BEG_UPDATE );                    /* lock menu bar     */
x_graf_blit( &r, 0L );                        /* save what's there */
objc_draw( tree, 0, 8, r.x, r.y, r.w, r.h );  /* draw dialog       */
form_do( tree, 0 );                           /* get user response */
x_graf_blit( 0L, &r );                        /* now restore       */
wind_update( END_UPDATE );                    /* re-enable menus   */
!end_verbatim

!item [(!nolink [Return]) value:]
0 = Not enough memory for data to be stored (!nl)
1 = No error

!item [Availability:]
The function is only available under Geneva.

!item [Group:]
Graphics library

!item [See also:]
(!link [Binding] [Bindings for x_graf_blit])

(!ende_liste)



!begin_node Bindings for x_graf_blit
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t x_graf_blit( GRECT *source, GRECT *dest );

!item [Binding:]
!begin_verbatim
int16_t x_graf_blit( GRECT *source, GRECT *dest )
{
   addr_in[0] = source;
   addr_in[1] = dest;

   crys_if(28976);

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 28976 # Function opcode
control+2 !! control[1] !! 0     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 2     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
addr_in   !! addr_in[0] !! source
addr_in+4 !! addr_in[1] !! dest
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node x_graf_blit

(!begin_liste) [Beschreibung]

!item [Name:]
ØBlit areaÆ

!item [AES-Nummer:]
28976

!item [Deklaration:]
int16_t x_graf_blit( GRECT *source, GRECT *dest );

!item [Beschreibung:]
!begin_xlist !compressed [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [source]
Adresse des Quellrechteck oder NULL
!item [dest]
Adresse des Zielrechteck oder NULL
!end_xlist

If (!I)source(!i) and (!I)dest(!i) are both non-zero, then the function simply blits the
screen data from one rectangle to the other.

If (!I)dest(!i) is NULL, then the operation saves the area of the screen specified
by source in its internal buffer. When the function ise=ater called with
source NULL and dest properly set, it will restore the area in the (new)
location.

The internal buffer is large enough to hold 1/2 of the current screen.
Exceeding this will cause Geneva to try to allocate enough memory to hold
the screen data. If this fails, a zero will be returned.
Since this buffer is also used by Geneva to hold the screen data for
alerts and menus, and also by the item selector, you should always
surround code which uses x_graf_blit with wind_update calls.

This example displays a dialog and uses a blit to restore what was
underneath it:
!begin_verbatim
OBJECT *tree;
GRECT r;

rsrc_gaddr( 0, 0, &tree );                    /* get dialog        */
form_center( tree, &r.x, &r.y, &r.w, &r.h );  /* center it         */
wind_update( BEG_UPDATE );                    /* lock menu bar     */
x_graf_blit( &r, 0L );                        /* save what's there */
objc_draw( tree, 0, 8, r.x, r.y, r.w, r.h );  /* draw dialog       */
form_do( tree, 0 );                           /* get user response */
x_graf_blit( 0L, &r );                        /* now restore       */
wind_update( END_UPDATE );                    /* re-enable menus   */
!end_verbatim

!item [Ergebnis:]
0 = Nicht genÅgend Speicher umd die Daten zu sichern (!nl)
1 = Kein Fehler

!item [VerfÅgbar:]
Die Funktion steht nur unter Geneva zur VerfÅgung.

!item [Gruppe:]
Grafikfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr x_graf_blit])

(!ende_liste)



!begin_node Bindings fÅr x_graf_blit
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t x_graf_blit( GRECT *source, GRECT *dest );

!item [Umsetzung:]
!begin_verbatim
int16_t x_graf_blit( GRECT *source, GRECT *dest )
{
   addr_in[0] = source;
   addr_in[1] = dest;

   crys_if(28976);

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 28976 # Opcode der Funktion
control+2 !! control[1] !! 0     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 2     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
addr_in   !! addr_in[0] !! source
addr_in+4 !! addr_in[1] !! dest
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
