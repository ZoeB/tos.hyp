!iflang [english]

!begin_node x_graf_rubberbox

(!begin_liste) [Availability]

!item [Name:]
ØExtended rubberband box drawingÆ

!item [Opcode:]
28977

!item [Syntax:]
int16_t x_graf_rubberbox(GRECT *area, GRECT *outer, int16_t minwidth, 
int16_t minheight, int16_t maxwidth, int16_t maxheight, int16_t snap, int16_t lag );

!item [Description:]
!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [area]
Initial size of the rubberband box
!item [outer]
Outer limit of the rubberband box
!item [minwidth]
Minimum width of the rubberband box
!item [minheight]
Minimum height of the box
!item [maxwidth]
Maximum width of the box
!item [maxheight]
Maximum height of the box
!item [snap]
Width/height increment
!item [lag]
!begin_table [l l l]
0 !! = !! Follow mouse exactly
1 !! = !! Move relative to initial width and height
!end_table
!end_xlist

This function is similar to the AES function graf_rubberbox, but it
offers several extensions.
!begin_itemize !compressed
!item The (!I)area(!i) parameter points to a GRECT structure which describes the
     dimensions of the initial rubberband box. If the lag parameter is
     zero, then the g_w and g_h elements of area are ignored.
!item (!I)outer(!i) describes the size of the outside bounding rectangle. The
     rubberband box will never go outside this box. If this is a NULL
     pointer, the outside boundaries will be the whole desktop.
!item (!I)minwidth(!i) and (!I)minheight(!i) describe the minimum height of the rubberband
     box; (!I)maxwidth(!i) and (!I)maxheight(!i) are the maximums. If either of the
     minimums are greater than zero, then extended resizing is possible.
     In this mode, the mouse can be dragged to the left or top edge of the
     minimum area, and resizing happens in a manner similar to Geneva's
     extended window resizing.
!item (!I)snap(!i) is the number of pixels to jump by. If this value is greater
     than 1, the rubberband box will only move when its width or height is
     an even increment of this value.
!item The (!I)lag(!i) parameter says whether the rubberband box should exactly
     follow the mouse, or if it should stay a constant distance from the
     mouse pointer. When resizing a window, Geneva uses the lag mode so
     that if the resize gadget is released before the mouse is moved, the
     window will not be resized.
!end_itemize

!item [(!nolink [Return]) value:]
0 = The mouse was released prematurely (!nl)
1 = No error

!item [Availability:]
The function is only available under Geneva.

!item [Group:]
Graphics library

!item [See also:]
(!link [Binding] [Bindings for x_graf_rubberbox]) ~ graf_rubberbox ~ graf_multirubber

(!ende_liste)



!begin_node Bindings for x_graf_rubberbox
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t x_graf_rubberbox(GRECT *area, GRECT *outer, int16_t minwidth, 
int16_t minheight, int16_t maxwidth, int16_t maxheight, int16_t snap, int16_t lag );

!item [Binding:]
!begin_verbatim
int16_t x_graf_rubberbox(GRECT *area, GRECT *outer, int16_t
minwidth, int16_t minheight, int16_t maxwidth, int16_t
maxheight, int16_t snap, int16_t lag )
{
   int_in[0] = minwidth;
   int_in[1] = minheight;
   int_in[2] = maxwidth;
   int_in[3] = maxheight;
   int_in[4] = snap;
   int_in[5] = lag;

   addr_in[0] = area;
   addr_in[1] = outer;

   crys_if(28977);

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 28977 # Function opcode
control+2 !! control[1] !! 6     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 2     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! minwidth
int_in+2  !! int_in[1]  !! minheight
int_in+4  !! int_in[2]  !! maxwidth
int_in+6  !! int_in[3]  !! maxheight
int_in+8  !! int_in[4]  !! snap
int_in+10 !! int_in[5]  !! lag
addr_in   !! addr_in[0] !! area
addr_in+4 !! addr_in[1] !! outer
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node x_graf_rubberbox

(!begin_liste) [Beschreibung]

!item [Name:]
ØExtended rubberband box drawingÆ

!item [AES-Nummer:]
28977

!item [Deklaration:]
int16_t x_graf_rubberbox(GRECT *area, GRECT *outer, int16_t minwidth, 
int16_t minheight, int16_t maxwidth, int16_t maxheight, int16_t snap, int16_t lag );

!item [Beschreibung:]
!begin_xlist !compressed [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [area]
Initial size of the rubberband box
!item [outer]
Outer limit of the rubberband box
!item [minwidth]
Minimum width of the rubberband box
!item [minheight]
Minimum height of the box
!item [maxwidth]
Maximum width of the box
!item [maxheight]
Maximum height of the box
!item [snap]
Width/height increment
!item [lag]
!begin_table [l l l]
0 !! = !! Follow mouse exactly
1 !! = !! Move relative to initial width and height
!end_table
!end_xlist

This function is similar to the AES function graf_rubberbox, but it
offers several extensions.
!begin_itemize !compressed
!item The (!I)area(!i) parameter points to a GRECT structure which describes the
     dimensions of the initial rubberband box. If the lag parameter is
     zero, then the g_w and g_h elements of area are ignored.
!item (!I)outer(!i) describes the size of the outside bounding rectangle. The
     rubberband box will never go outside this box. If this is a NULL
     pointer, the outside boundaries will be the whole desktop.
!item (!I)minwidth(!i) and (!I)minheight(!i) describe the minimum height of the rubberband
     box; (!I)maxwidth(!i) and (!I)maxheight(!i) are the maximums. If either of the
     minimums are greater than zero, then extended resizing is possible.
     In this mode, the mouse can be dragged to the left or top edge of the
     minimum area, and resizing happens in a manner similar to Geneva's
     extended window resizing.
!item (!I)snap(!i) is the number of pixels to jump by. If this value is greater
     than 1, the rubberband box will only move when its width or height is
     an even increment of this value.
!item The (!I)lag(!i) parameter says whether the rubberband box should exactly
     follow the mouse, or if it should stay a constant distance from the
     mouse pointer. When resizing a window, Geneva uses the lag mode so
     that if the resize gadget is released before the mouse is moved, the
     window will not be resized.
!end_itemize

!item [Ergebnis:]
0 = The mouse was released prematurely (!nl)
1 = Kein Fehler

!item [VerfÅgbar:]
Die Funktion steht nur unter Geneva zur VerfÅgung.

!item [Gruppe:]
Grafikfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr x_graf_rubberbox]) ~ graf_rubberbox ~ graf_multirubber

(!ende_liste)



!begin_node Bindings fÅr x_graf_rubberbox
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t x_graf_rubberbox(GRECT *area, GRECT *outer, int16_t minwidth, 
int16_t minheight, int16_t maxwidth, int16_t maxheight, int16_t snap, int16_t lag );

!item [Umsetzung:]
!begin_verbatim
int16_t x_graf_rubberbox(GRECT *area, GRECT *outer, int16_t
minwidth, int16_t minheight, int16_t maxwidth, int16_t
maxheight, int16_tsnap, int16_t lag )
{
   int_in[0] = minwidth;
   int_in[1] = minheight;
   int_in[2] = maxwidth;
   int_in[3] = maxheight;
   int_in[4] = snap;
   int_in[5] = lag;

   addr_in[0] = area;
   addr_in[1] = outer;

   crys_if(28977);

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 28977 # Opcode der Funktion
control+2 !! control[1] !! 6     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 2     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! minwidth
int_in+2  !! int_in[1]  !! minheight
int_in+4  !! int_in[2]  !! maxwidth
int_in+6  !! int_in[3]  !! maxheight
int_in+8  !! int_in[4]  !! snap
int_in+10 !! int_in[5]  !! lag
addr_in   !! addr_in[0] !! area
addr_in+4 !! addr_in[1] !! outer
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
