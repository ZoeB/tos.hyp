!iflang [english]

!begin_node x_sprintf

(!begin_liste) [Availability]

!item [Name:]
ØGeneva sprinftÆ - Print data to a string, with extended formats.

!item [Opcode:]
29059

!item [Syntax:]
void x_sprintf( int8_t *buf, int8_t *fmt, ... );

!item [Description:]
!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [buf]
Buffer to receive output string
!item [fmt]
Null-terminated format string
!item [...]
Pointer to first argument on user stack
!end_xlist

This function acts almost identically to the sprintf function found in
C programming libraries. It understands the following format specifiers:
!begin_table
%c !! Character
%s !! String
%x !! Unsigned int in hexadecimal
%X !! Unsigned long in hexadecimal
%d !! Signed int in decimal
%D !! Signed long in decimal
%o !! Signed int in octal
%b !! Boolean:  'F' for 0, or 'T' for non-zero
%k !! When passed a pointer to a KEYCODE structure, output
   !! all three elements using the format "%02x %02x %02x"
%v !! Take the int argument and output the MSB and LSB in the
   !! format "%x.%02x". Used for generating version numbers.
%S !! Surround the string with curly braces, so that a string
   !! containing spaces can be read back in correctly with
   !! the x_sscanf function
%h !! Same as %x
!end_table
These prefixes can be used before the string and number formats:

!begin_table
- !! Left-justified, instead of right-justified
0 !! Pad with 0's insteausof spaces
0-9 !! Any number of digits (following a possible first '0'
    !! for padding) specify the field length, in decimal
!end_table

!begin_verbatim
Example:                                   Result:
x_sprintf( str, "%04x", 0xFE );            00FE
x_sprintf( str, "%-06s", "Hi!" );          Hi!000
x_sprintf( str, "%6s", "Hi!" );            Hi!
x_sprintf( str, "%b %v", 2, 0x502 );       T 5.02
x_sprintf( str, "%S %s", "a b", "c d" );   {a b} c d
KEYCODE key = { 1, 0, 'X' };
x_sprintf( str, "key=%k", &key );          keyd 1 00 58
!end_verbatim
This sort of thing doesn't really belong in a GUI, but it made sense to
include it, since it is used by Geneva internally, anyway.

!item [(!nolink [Return]) value:]
The function have no return value.

!item [Availability:]
The function is only available under Geneva.

!item [Group:]
Geneva library

!item [See also:]
(!link [Binding] [Bindings for x_sprintf])

(!ende_liste)



!begin_node Bindings for x_sprintf
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void x_sprintf( int8_t *buf, int8_t *fmt, ... );

!item [Binding:]
!begin_verbatim
void x_sprintf( int8_t *buf, int8_t *fmt, ... )
{
   addr_in[0] = buf;
   addr_in[1] = fmt;
   addr_in[2] = &...;

   crys_if(29059);

   return;
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 29059 # Function opcode
control+2 !! control[1] !! 0     # Entry in int_in
control+4 !! control[2] !! 0     # Entry in int_out
control+6 !! control[3] !! 3     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
addr_in   !! addr_in[0]  !! buf
addr_in+4 !! addr_in[1]  !! fmt
addr_in+8 !! addr_in[2]  !! ...
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node x_sprintf

(!begin_liste) [Beschreibung]

!item [Name:]
ØGeneva sprinftÆ - Print data to a string, with extended formats.

!item [AES-Nummer:]
29059

!item [Deklaration:]
void x_sprintf( int8_t *buf, int8_t *fmt, ... );

!item [Beschreibung:]
!begin_xlist !compressed [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [buf]
Buffer to receive output string
!item [fmt]
Null-terminated format string
!item [...]
Pointer to first argument on user stack
!end_xlist

This function acts almost identically to the sprintf function found in
C programming libraries. It understands the following format specifiers:
!begin_table
%c !! Character
%s !! String
%x !! Unsigned int in hexadecimal
%X !! Unsigned long in hexadecimal
%d !! Signed int in decimal
%D !! Signed long in decimal
%o !! Signed int in octal
%b !! Boolean:  'F' for 0, or 'T' for non-zero
%k !! When passed a pointer to a KEYCODE structure, output
   !! all three elements using the format "%02x %02x %02x"
%v !! Take the int argument and output the MSB and LSB in the
   !! format "%x.%02x". Used for generating version numbers.
%S !! Surround the string with curly braces, so that a string
   !! containing spaces can be read back in correctly with
   !! the x_sscanf function
%h !! Same as %x
!end_table
These prefixes can be used before the string and number formats:

!begin_table
- !! Left-justified, instead of right-justified
0 !! Pad with 0's insteausof spaces
0-9 !! Any number of digits (following a possible first '0'
    !! for padding) specify the field length, in decimal
!end_table

!begin_verbatim
Example:                                   Result:
x_sprintf( str, "%04x", 0xFE );            00FE
x_sprintf( str, "%-06s", "Hi!" );          Hi!000
x_sprintf( str, "%6s", "Hi!" );            Hi!
x_sprintf( str, "%b %v", 2, 0x502 );       T 5.02
x_sprintf( str, "%S %s", "a b", "c d" );   {a b} c d
KEYCODE key = { 1, 0, 'X' };
x_sprintf( str, "key=%k", &key );          keyd 1 00 58
!end_verbatim
This sort of thing doesn't really belong in a GUI, but it made sense to
include it, since it is used by Geneva internally, anyway.

!item [Ergebnis:]
Die Funktion hat keinen RÅckgabewert.

!item [VerfÅgbar:]
Die Funktion steht nur unter Geneva zur VerfÅgung.

!item [Gruppe:]
Geneva Funktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr x_sprintf])

(!ende_liste)



!begin_node Bindings fÅr x_sprintf
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void x_sprintf( int8_t *buf, int8_t *fmt, ... );

!item [Umsetzung:]
!begin_verbatim
void x_sprintf( int8_t *buf, int8_t *fmt, ... )
{
   addr_in[0] = buf;
   addr_in[1] = fmt;
   addr_in[2] = &...;

   crys_if(29059);

   return;
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 29059 # Opcode der Funktion
control+2 !! control[1] !! 0     # EintrÑge in int_in
control+4 !! control[2] !! 0     # EintrÑge in int_out
control+6 !! control[3] !! 3     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
addr_in   !! addr_in[0]  !! buf
addr_in+4 !! addr_in[1]  !! fmt
addr_in+8 !! addr_in[2]  !! ...
!end_table

(!ende_liste)
!end_node
!end_node

!endif
