!iflang [english]

!begin_node x_realloc

(!begin_liste) [Availability]

!item [Name:]
Ømemory reallocÆ -  Change the size of memory allocated with x_malloc.

!item [Opcode:]
29065

!item [Syntax:]
int16_t x_realloc( void **addr, int32_t newsize );

!item [Description:]
!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [addr]
Pointer to a memory block previously allocated with x_malloc.
!item [newsize]
New size of the memory block.
!end_xlist

This function changes the size of a block of memory previously
allocated with the x_malloc function. If (!I)newsize(!i) is greater than
the block's original size, it may be necessary for Geneva to move the
block to a new location. If there is insufficient free memory to
increase the size of the block, the "old" block continues to reside
where it was and an error code is returned.

!item [(!nolink [Return]) value:]
0 = Success (!nl)
other = Failure

!item [Availability:]
The function is only available under Geneva since Release 004.

!item [Group:]
Geneva library

!item [See also:]
(!link [Binding] [Bindings for x_realloc])

(!ende_liste)



!begin_node Bindings for x_realloc
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t x_realloc( void **addr, int32_t newsize );

!item [Binding:]
!begin_verbatim
int16_t x_realloc( void **addr, int32_t newsize )
{
   int_in[0-1] = newsize;    /* int_in[0] MSW of the size */
                             /* int_in[1] LSW of the size (lower 16 bits) */
   addr_in[0] = addr;

   crys_if(29065);

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 29065 # Function opcode
control+2 !! control[1] !! 2     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 1     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! newsize; MSW of the size
int_in+2  !! int_in[1]  !! newsize; LSW of the size (lower 16 bits)
addr_in   !! addr_in[0] !! addr
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node x_realloc

(!begin_liste) [Beschreibung]

!item [Name:]
Ømemory reallocÆ -  Change the size of memory allocated with x_malloc.

!item [AES-Nummer:]
29065

!item [Deklaration:]
int16_t x_realloc( void **addr, int32_t newsize );

!item [Beschreibung:]
!begin_xlist !compressed [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [addr]
Pointer to a memory block previously allocated with x_malloc.
!item [newsize]
New size of the memory block.
!end_xlist

This function changes the size of a block of memory previously
allocated with the x_malloc function. If (!I)newsize(!i) is greater than
the block's original size, it may be necessary for Geneva to move the
block to a new location. If there is insufficient free memory to
increase the size of the block, the "old" block continues to reside
where it was and an error code is returned.

!item [Ergebnis:]
0 = Erfolgreich (!nl)
sonst = Fehler

!item [VerfÅgbar:]
Die Funktion steht nur unter Geneva seit Release 004 zur VerfÅgung.

!item [Gruppe:]
Geneva Funktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr x_realloc])

(!ende_liste)



!begin_node Bindings fÅr x_realloc
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t x_realloc( void **addr, int32_t newsize );

!item [Umsetzung:]
!begin_verbatim
int16_t x_realloc( void **addr, int32_t newsize )
{
   int_in[0-1] = newsize;    /* int_in[0] MSW of the size */
                             /* int_in[1] LSW of the size (lower 16 bits) */
   addr_in[0] = addr;

   crys_if(29065);

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 29065 # Opcode der Funktion
control+2 !! control[1] !! 2     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 1     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! newsize; MSW of the size
int_in+2  !! int_in[1]  !! newsize; LSW of the size (lower 16 bits)
addr_in   !! addr_in[0] !! addr
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
