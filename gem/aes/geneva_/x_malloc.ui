!iflang [english]

!begin_node x_malloc

(!begin_liste) [Availability]

!item [Name:]
Ømemory allocationÆ - Allocate memory from Geneva.

!item [Opcode:]
29062

!item [Syntax:]
void x_malloc( void **addr, int32_t size );

!item [Description:]
!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [size]
Number of bytes to be reserved
!item [addr]
Pointer to a pointer which receives the address of an allocated block, or 0L
!end_xlist

This function allocates memory, much in the same way Malloc or malloc does.
The only major difference is that it comes without the extra overhead of
malloc. Since Geneva takes this memory from the same pool as the rest of
its memory, it is also not as likely to cause memory fragmentation if the
application allocates lots of small blocks using this call as it is when
doing so with Malloc.

If no memory could be allocated, the (!I)addr(!i) is set to NULL (0L).

Unlike the GEMDOS Malloc function, this function does not accept the
"size" -1L.

!item [(!nolink [Return]) value:]
The function have no return value.

!item [Availability:]
The function is only available under Geneva since Release 004.

!item [Group:]
Geneva library

!item [See also:]
(!link [Binding] [Bindings for x_malloc])

(!ende_liste)



!begin_node Bindings for x_malloc
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void x_malloc( void **addr, int32_t size );

!item [Binding:]
!begin_verbatim
void x_malloc( void **addr, int32_t size )
{
   (int32_t)int_in[0] = size;

   addr_in[0] = addr;

   crys_if(29062);

   return;
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 29062 # Function opcode
control+2 !! control[1] !! 2     # Entry in int_in
control+4 !! control[2] !! 0     # Entry in int_out
control+6 !! control[3] !! 1     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! MSW of the size
int_in+2  !! int_in[1]  !! LSW of the size (lower 16 bits)
addr_in   !! addr_in[0] !! addr
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node x_malloc

(!begin_liste) [Beschreibung]

!item [Name:]
Ømemory allocationÆ - Speicherplatz reservieren von Geneva.

!item [AES-Nummer:]
29062

!item [Deklaration:]
void x_malloc( void **addr, int32_t size );

!item [Beschreibung:]
!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [size]
Number of bytes to be reserved
!item [addr]
Pointer to a pointer which receives the address of an allocated block, or 0L
!end_xlist

This function allocates memory, much in the same way Malloc or malloc does.
The only major difference is that it comes without the extra overhead of
malloc. Since Geneva takes this memory from the same pool as the rest of
its memory, it is also not as likely to cause memory fragmentation if the
application allocates lots of small blocks using this call as it is when
doing so with Malloc.

If no memory could be allocated, the (!I)addr(!i) is set to NULL (0L).

Unlike the GEMDOS Malloc function, this function does not accept the
"size" -1L.


!item [Ergebnis:]
Die Funktion hat keinen RÅckgabewert.

!item [VerfÅgbar:]
Die Funktion steht nur unter Geneva seit Release 004 zur VerfÅgung.

!item [Gruppe:]
Geneva Funktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr x_malloc])

(!ende_liste)



!begin_node Bindings fÅr x_malloc
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void x_malloc( void **addr, int32_t size );

!item [Umsetzung:]
!begin_verbatim
void x_malloc( void **addr, int32_t size )
{
   (int32_t)int_in[0] = size;

   addr_in[0] = addr;

   crys_if(29062);

   return;
}
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 29062 # Opcode der Funktion
control+2 !! control[1] !! 2     # EintrÑge in int_in
control+4 !! control[2] !! 0     # EintrÑge in int_out
control+6 !! control[3] !! 1     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! MSW of the size
int_in+2  !! int_in[1]  !! LSW of the size (lower 16 bits)
addr_in   !! addr_in[0] !! addr
!end_table

(!ende_liste)
!end_node
!end_node

!endif
