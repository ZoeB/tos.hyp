!iflang [english]

!begin_node x_shel_get

(!begin_liste) [Availability]

!item [Name:]
ØShell getÆ - Read information from GENEVA.CNF.

!item [Opcode:]
29057

!item [Syntax:]
int16_t x_shel_get ( int16_t mode, int16_t length, int8_t *buf );

!item [Description:]
!begin_xlist !compressed [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [mode]
!label X_SHLOADSAVE
!label X_SHOPEN
!label X_SHACCESS
!label X_SHCLOSE
!begin_xlist [~~]
!item [-1] Re-read Geneva's settings
!item [~0] Open GENEVA.CNF
!item [~1] Read a line
!item [~2] Close GENEVA.CNF
!end_xlist
!item [length]
Number of bytes to read into (!I)buf(!i).
!item [buf]
Product string (mode 0) or buffer to read (!I)length(!i) bytes of data into
(mode 1).
!end_xlist
This function will cause Geneva to either re-read all of its own internal
settings, or read the settings from an outside program's portion of
GENEVA.CNF.

When mode is X_SHLOADSAVE (-1), Geneva will re-read all of its internal
settings. The length and buf parameters are not used in this mode. The
Task Manager's "Load Settings" option uses this.

In order to read its own settings, a program must begin by using mode
X_SHOPEN (0) to open GENEVA.CNF. The name passed in buf can contain any
character (including uppercase and punctuation) except the [ or ]
characters. The length parameter is not used in this mode.

If the X_SHOPEN was successful, the program can then make repeated calls
using the X_SHACCESS (1) mode. Here, length specifies the maximum number
of bytes to read into the string buffer buf. The x_sscanf function is
very helpful for retreiving formatted data that has been read with
x_shel_get.

If an error occurs at any time during the open or read phases (or if the
program's section of GENEVA.CNF ends), the file is automatically closed.
If a program wants to end the reading sooner, it must use mode X_SHCLOSE
(2) to close the file. Otherwise, any future attempts to read from the
file will fail.

Example:
!begin_verbatim
int sh_error( int err )
{
  switch(err) {
     case -2:
       Cconws( "Disk error" );
     return 1;
     case -1:
       Cconws( "GENEVA.CNF is already in use by another program" );
     return 1;
     case 0:
       Cconws( "Read failed unexpectedly" );
     return 1;
     default:
     return 0;
  }
}

main() {
  char buffer[100];
  int version, number1, number2;

  if( !sh_error( x_shel_get(X_SHOPEN,0,"My Program") ) )
     if( !sh_error( x_shel_get(X_SHACCESS,sizeof(buffer),buffer) ) )
     {
       x_sscanf( buffer, "%v", &version );
       if( version != 0x200 ) {
          Cconws( "Not compatible with version 2.0!" );
          x_shel_get( X_SHCLOSE, 0, 0L );
          return;
       }
       if( !sh_error( x_shel_get(X_SHACCESS,sizeof(buffer),
          buffer) ) )
       x_sscanf( buffer, "%x %d", number1, number2 );
       x_shel_get( X_SHCLOSE, 0, 0L );
     }
}
!end_verbatim

!item [(!nolink [Return]) value:]
!begin_xlist !compressed [~~]
!item [-3] Incorrect GENEVA.CNF version (mode -1)
!item [-2] Disk error
!item [-1] Already in use (mode 0)
!item [~0] End of data or string not found
!item [~1] No error
!end_xlist

!item [Availability:]
The function is only available under Geneva.

!item [Group:]
Shell library

!item [See also:]
(!link [Binding] [Bindings for x_shel_get])

(!ende_liste)



!begin_node Bindings for x_shel_get
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t x_shel_get ( int16_t mode, int16_t length, int8_t *buf );

!item [Binding:]
!begin_verbatim
int16_t x_shel_get ( int16_t mode, int16_t length, int8_t *buf
)
{
   int_in[0] = mode;
   int_in[1] = length;
   addr_in[0] = buf;

   crys_if(29057);

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 29057 # Function opcode
control+2 !! control[1] !! 2     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 1     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! mode
int_in+2  !! int_in[1]  !! length
addr_in   !! addr_in[0] !! buf
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node x_shel_get

(!begin_liste) [Beschreibung]

!item [Name:]
ØShell getÆ - Read information from GENEVA.CNF.

!item [AES-Nummer:]
29057

!item [Deklaration:]
int16_t x_shel_get ( int16_t mode, int16_t length, int8_t *buf );

!item [Beschreibung:]
!begin_xlist !compressed [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [~]
~
!item [mode]
!label X_SHLOADSAVE
!label X_SHOPEN
!label X_SHACCESS
!label X_SHCLOSE
!begin_xlist [~~]
!item [-1] Re-read Geneva's settings
!item [~0] Open GENEVA.CNF
!item [~1] Read a line
!item [~2] Close GENEVA.CNF
!end_xlist
!item [length]
Number of bytes to read into (!I)buf(!i).
!item [buf]
Product string (mode 0) or buffer to read (!I)length(!i) bytes of data into
(mode 1).
!end_xlist
This function will cause Geneva to either re-read all of its own internal
settings, or read the settings from an outside program's portion of
GENEVA.CNF.

When mode is X_SHLOADSAVE (-1), Geneva will re-read all of its internal
settings. The length and buf parameters are not used in this mode. The
Task Manager's "Load Settings" option uses this.

In order to read its own settings, a program must begin by using mode
X_SHOPEN (0) to open GENEVA.CNF. The name passed in buf can contain any
character (including uppercase and punctuation) except the [ or ]
characters. The length parameter is not used in this mode.

If the X_SHOPEN was successful, the program can then make repeated calls
using the X_SHACCESS (1) mode. Here, length specifies the maximum number
of bytes to read into the string buffer buf. The x_sscanf function is
very helpful for retreiving formatted data that has been read with
x_shel_get.

If an error occurs at any time during the open or read phases (or if the
program's section of GENEVA.CNF ends), the file is automatically closed.
If a program wants to end the reading sooner, it must use mode X_SHCLOSE
(2) to close the file. Otherwise, any future attempts to read from the
file will fail.

Example:
!begin_verbatim
int sh_error( int err )
{
  switch(err) {
     case -2:
       Cconws( "Disk error" );
     return 1;
     case -1:
       Cconws( "GENEVA.CNF is already in use by another program" );
     return 1;
     case 0:
       Cconws( "Read failed unexpectedly" );
     return 1;
     default:
     return 0;
  }
}

main() {
  char buffer[100];
  int version, number1, number2;

  if( !sh_error( x_shel_get(X_SHOPEN,0,"My Program") ) )
     if( !sh_error( x_shel_get(X_SHACCESS,sizeof(buffer),buffer) ) )
     {
       x_sscanf( buffer, "%v", &version );
       if( version != 0x200 ) {
          Cconws( "Not compatible with version 2.0!" );
          x_shel_get( X_SHCLOSE, 0, 0L );
          return;
       }
       if( !sh_error( x_shel_get(X_SHACCESS,sizeof(buffer),
          buffer) ) )
       x_sscanf( buffer, "%x %d", number1, number2 );
       x_shel_get( X_SHCLOSE, 0, 0L );
     }
}
!end_verbatim

!item [Ergebnis:]
!begin_xlist !compressed [~~]
!item [-3] Incorrect GENEVA.CNF version (mode -1)
!item [-2] Disk error
!item [-1] Already in use (mode 0)
!item [~0] End of data or string not found
!item [~1] Kein Fehler
!end_xlist

!item [VerfÅgbar:]
Die Funktion steht nur unter Geneva zur VerfÅgung.

!item [Gruppe:]
(!link [Shell-Kommunikation][Shellfunktionen])

!item [Querverweis:]
(!link [Binding] [Bindings fÅr x_shel_get])

(!ende_liste)



!begin_node Bindings fÅr x_shel_get
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t x_shel_get ( int16_t mode, int16_t length, int8_t *buf );

!item [Umsetzung:]
!begin_verbatim
int16_t x_shel_get ( int16_t mode, int16_t length, int8_t *buf
)
{
   int_in[0] = mode;
   int_in[1] = length;
   addr_in[0] = buf;

   crys_if(29057);

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 29057 # Opcode der Funktion
control+2 !! control[1] !! 2     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 1     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! getset
int_in+2  !! int_in[1]  !! length
addr_in   !! addr_in[0] !! buf
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
