!iflang [english]

!begin_node x_objc_edit

(!begin_liste) [Availability]

!item [Name:]
ØObject editÆ - Edit text in an editable text object.

!item [Opcode:]
28992

!item [Syntax:]
int16_t x_objc_edit( OBJECT *tree, int16_t edit_obj, int16_t key_press,
int16_t shift_state, int16_t *edit_idx, int16_t mode );

!item [Description:]
!begin_xlist !compressed [shift_state]
!item [Parameter]
Meaning
!item [~]
~
!item [tree]
OBJECT tree containing editable field
!item [edit_obj]
Object being edited
!item [key_press]
Scan code and ASCII value of the key
!item [shift_state]
!begin_table [l l l]
Bit 0 !! = !! Right-Shift
Bit 1 !! = !! Left-Shift
Bit 2 !! = !! Control
!end_table
!item [edit_idx]
Current cursor position within field
!item [mode]
!begin_xlist !compressed [1]
!item [1]
Calculate formatted string, and switch on cursor
!item [2]
Process character and then display string anew
!item [3]
Switch off cursor
!end_xlist
!end_xlist

This function is nearly identical to the objc_edit function normaly
found in GEM. By adding the shift_state, however, it is able to correctly
process extended keystrokes involving the [Control] and [Shift] keys.

!item [(!nolink [Return]) value:]
0 = not an editable field (!nl)
1 = No error

In (!I)edit_idx(!i) will return the new cursor position.

!item [Availability:]
The function is only available under Geneva.

!item [Group:]
Object library

!item [See also:]
(!link [Binding] [Bindings for x_objc_edit]) ~ objc_edit

(!ende_liste)



!begin_node Bindings for x_objc_edit
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t x_objc_edit( OBJECT *tree, int16_t edit_obj, int16_t key_press,
int16_t shift_state, int16_t *edit_idx, int16_t mode );

!item [Binding:]
!begin_verbatim
int16_t x_objc_edit( OBJECT *tree, int16_t edit_obj, int16_t
key_press, int16_t shift_state, int16_t *edit_idx, int16_t
mode )
{
   int_in[0] = edit_obj;
   int_in[1] = key_press;
   int_in[2] = *edit_idx;
   int_in[3] = shift_state;
   int_in[4] = mode;
   addr_in[0] = tree;

   crys_if(28992);

   *edit_idx = int_out[1];
   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 28992 # Function opcode
control+2 !! control[1] !! 5     # Entry in int_in
control+4 !! control[2] !! 2     # Entry in int_out
control+6 !! control[3] !! 1     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! edit_obj
int_in+2  !! int_in[1]  !! key_press
int_in+4  !! int_in[2]  !! edit_idx
int_in+6  !! int_in[3]  !! shift_state
int_in+8  !! int_in[4]  !! mode
addr_in   !! addr_in[0] !! tree
int_out   !! int_out[0] !! Return value
int_out+2 !! int_out[1] !! edit_idx
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node x_objc_edit

(!begin_liste) [Beschreibung]

!item [Name:]
ØObject editÆ - editiert einen Text in einem Objekt.

!item [AES-Nummer:]
28992

!item [Deklaration:]
int16_t x_objc_edit( OBJECT *tree, int16_t edit_obj, int16_t key_press,
int16_t shift_state, int16_t *edit_idx, int16_t mode );

!item [Beschreibung:]
!begin_xlist !compressed [shift_state]
!item [Parameter]
Bedeutung
!item [~]
~
!item [tree]
Adresse des Objektbaumes
!item [edit_obj]
Nummer des zu editierenden Objektes
!item [key_press]
eingegebenes Zeichen
!item [shift_state]
!begin_table [l l l]
Bit 0 !! = !! Rechte Shift-Taste
Bit 1 !! = !! Linke Shift-Taste
Bit 2 !! = !! Control
!end_table
!item [edit_idx]
Current cursor position within field
!item [mode]
!begin_xlist !compressed [1]
!item [1]
formatierten String berechnen, und Cursor einschalten
!item [2]
Zeichen verarbeiten und String anschlieûend neu anzeigen
!item [3]
Cursor ausschalten
!end_xlist
!end_xlist

This function is nearly identical to the objc_edit function normaly
found in GEM. By adding the shift_state, however, it is able to correctly
process extended keystrokes involving the [Control] and [Shift] keys.

!item [Ergebnis:]
0 = (!I)edit_obj(!i) ist kein editierbares Feld (!nl)
1 = Kein Fehler

In (!I)edit_idx(!i) wird die neue Cursorposition zurÅckgeliefert.

!item [VerfÅgbar:]
Die Funktion steht nur unter Geneva zur VerfÅgung.

!item [Gruppe:]
(!link [Objekte][Objektfunktionen])

!item [Querverweis:]
(!link [Binding] [Bindings fÅr x_objc_edit]) ~ objc_edit

(!ende_liste)



!begin_node Bindings fÅr x_objc_edit
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t x_objc_edit( OBJECT *tree, int16_t edit_obj, int16_t key_press,
int16_t shift_state, int16_t *edit_idx, int16_t mode );

!item [Umsetzung:]
!begin_verbatim
int16_t x_objc_edit( OBJECT *tree, int16_t edit_obj, int16_t key_press,
int16_t shift_state, int16_t *edit_idx, int16_t mode )
{
   int_in[0] = edit_obj;
   int_in[1] = key_press;
   int_in[2] = *edit_idx;
   int_in[3] = shift_state;
   int_in[4] = mode;
   addr_in[0] = tree;

   crys_if(28992);

   *edit_idx = int_out[1];
   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 28992 # Opcode der Funktion
control+2 !! control[1] !! 6     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 2     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! edit_obj
int_in+2  !! int_in[1]  !! key_press
int_in+4  !! int_in[2]  !! edit_idx
int_in+6  !! int_in[3]  !! shift_state
int_in+8  !! int_in[4]  !! mode
addr_in   !! addr_in[0] !! tree
int_out   !! int_out[0] !! Return-Wert
int_out+2 !! int_out[1] !! edit_idx
!end_table

(!ende_liste)
!end_node
!end_node

!endif
