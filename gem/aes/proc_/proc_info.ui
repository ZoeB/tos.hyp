!iflang [english]

!begin_node proc_info

(!begin_liste) [Availability]

!item [Name:]
(!rdouble)Process information(!ldouble) - Obtains information about a process

!item [Opcode:]
63

!item [Syntax:]
int16_t proc_info ( int16_t pid, int16_t *is_swap, int16_t *is_gem,
               void **address, int32_t *csize, void **endmem,
               int32_t *ssize, void **intaddr );

!item [Description:]
The call proc_info inquires information about a process. The following apply:
!begin_xlist !compressed [is_swap]
!item [pid]
Process ID about which to get info
!item [is_swap]
Nonzero if swappable, else zero
!item [is_gem]
Nonzero for a (!nolink [GEM]) application, zero for a DOS application
!item [address]
Address of channel
!item [csize]
(!nolink [Size]) of channel
!item [endmem]
First address beyond end of process memory
!item [ssize]
Channel system size
!item [intaddr]
Address of process's copy of the interrupt vector table
!end_xlist

!item [(!nolink [Return]) value:]
An error has arisen only if the value 0 is returned.

!item [Availability:]
The function is only available under (!nolink [GEM XM]) and FreeGEM/XM.

!item [Group:]
Process library

!item [See also:]
(!link [Binding] [Bindings for proc_info]) ~ proc_create ~ proc_run ~
proc_switch

(!ende_liste)



!begin_node Bindings for proc_info
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t proc_info ( int16_t pid, int16_t *is_swap, int16_t *is_gem,
              void **address, int32_t *csize, void **endmem,
              int32_t *ssize, void **intaddr );

!item [Binding:]
!begin_verbatim
int16_t proc_info (int16_t pid, int16_t *is_swap, int16_t *is_gem,
              void **address, int32_t *csize, void **endmem,
              int32_t *ssize, void **intaddr)
{
   int_in[0]  = pid;

   crys_if(63);

   *is_swap  = int_out[1];
   *is_gem   = int_out[2];
   *address  = addr_out[0];
   *csize    = addr_out[1];
   *endmem   = addr_out[2];
   *ssize    = addr_out[3];
   *intaddr  = addr_out[4];

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control     !! control[0]  !! 63    # Function opcode
control+2   !! control[1]  !! 1     # Entry in int_in
control+4   !! control[2]  !! 3     # Entry in int_out
control+6   !! control[3]  !! 0     # Entry in addr_in
control+8   !! control[4]  !! 5     # Entry in addr_out
int_in      !! int_in[0]   !! pid
int_out     !! int_out[0]  !! Return value
int_out+2   !! int_out[1]  !! is_swap
int_out+4   !! int_out[2]  !! is_gem
addr_out    !! addr_out[0] !! address
addr_out+4  !! addr_out[1] !! csize
addr_out+8  !! addr_out[2] !! endmem
addr_out+12 !! addr_out[3] !! ssize
addr_out+16 !! addr_out[4] !! intaddr
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node proc_info

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)Process information(!ldouble) - Obtains information about a process

!item [AES-Nummer:]
63

!item [Deklaration:]
int16_t proc_info ( int16_t pid, int16_t *is_swap, int16_t *is_gem,
               void **address, int32_t *csize, void **endmem,
               int32_t *ssize, void **intaddr );

!item [Beschreibung:]
The call proc_info inquires information about a process. The following apply:
!begin_xlist !compressed [is_swap]
!item [pid]
Process ID about which to get info
!item [is_swap]
Nonzero if swappable, else zero
!item [is_gem]
Nonzero for a (!nolink [GEM]) application, zero for a DOS application
!item [address]
Address of channel
!item [csize]
(!nolink [Size]) of channel
!item [endmem]
First address beyond end of process memory
!item [ssize]
Channel system size
!item [intaddr]
Address of process's copy of the interrupt vector table
!end_xlist

!item [Ergebnis:]
An error has arisen only if the value 0 is returned.

!item [Verf(!uumlaut)gbar:]
The function is only available under (!nolink [GEM XM]) and FreeGEM/XM.

!item [Gruppe:]
Fensterverwaltung

!item [Querverweis:]
(!link [Binding] [Bindings f(!uumlaut)r proc_info]) ~ proc_create ~ proc_run ~
proc_switch

(!ende_liste)



!begin_node Bindings f(!uumlaut)r proc_info
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t proc_info ( int16_t pid, int16_t *is_swap, int16_t *is_gem,
              void **address, int32_t *csize, void **endmem,
              int32_t *ssize, void **intaddr );

!item [Umsetzung:]
!begin_verbatim
int16_t proc_info (int16_t pid, int16_t *is_swap, int16_t *is_gem,
              void **address, int32_t *csize, void **endmem,
              int32_t *ssize, void **intaddr)
{
   int_in[0]  = pid;

   crys_if(63);

   *is_swap  = int_out[1];
   *is_gem   = int_out[2];
   *address  = addr_out[0];
   *csize    = addr_out[1];
   *endmem   = addr_out[2];
   *ssize    = addr_out[3];
   *intaddr  = addr_out[4];

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 63    # Opcode der Funktion
control+2 !! control[1] !! 1     # Eintr(!aumlaut)ge in int_in
control+4 !! control[2] !! 3     # Eintr(!aumlaut)ge in int_out
control+6 !! control[3] !! 0     # Eintr(!aumlaut)ge in addr_in
control+8 !! control[4] !! 5     # Eintr(!aumlaut)ge in addr_out
int_in      !! int_in[0]   !! pid
int_out     !! int_out[0]  !! (!nolink [Return])-Wert
int_out+2   !! int_out[1]  !! is_swap
int_out+4   !! int_out[2]  !! is_gem
addr_out    !! addr_out[0] !! address
addr_out+4  !! addr_out[1] !! csize
addr_out+8  !! addr_out[2] !! endmem
addr_out+12 !! addr_out[3] !! ssize
addr_out+16 !! addr_out[4] !! intaddr
!end_table

(!ende_liste)
!end_node
!end_node

!endif
