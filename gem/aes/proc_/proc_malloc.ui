!iflang [english]

!begin_node proc_malloc

(!begin_liste) [Availability]

!item [Name:]
(!rdouble)Process memory allocation(!ldouble) - Allocate memory

!item [Opcode:]
64

!item [Syntax:]
void *proc_malloc ( int32_t size, int32_t *ret_size );

!item [Description:]
The call proc_malloc allocates a memory block of (!I)size(!i) bytes.

!item [(!nolink [Return]) value:]
The function returns a pointer to the allocated memory block, or 0
if failed. (!I)ret_size(!i) is filled with either the size of the
allocated memory block, or with the maximum available size.

!item [Availability:]
The function is only available under (!nolink [GEM XM]) and FreeGEM/XM.

!item [Group:]
Process library

!item [See also:]
(!link [Binding] [Bindings for proc_malloc]) ~ proc_mfree ~ proc_setblock ~
proc_shrink

(!ende_liste)



!begin_node Bindings for proc_malloc
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void *proc_malloc ( int32_t size, int32_t *ret_size );

!item [Binding:]
!begin_verbatim
void *proc_malloc (int32_t size, int32_t *ret_size)
{
   addr_in[0] = size;

   crys_if(64);

   *ret_size = addr_out[1];

   return ( addr_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control    !! control[0]  !! 64    # Function opcode
control+2  !! control[1]  !! 0     # Entry in int_in
control+4  !! control[2]  !! 1     # Entry in int_out
control+6  !! control[3]  !! 1     # Entry in addr_in
control+8  !! control[4]  !! 2     # Entry in addr_out
addr_in    !! addr_in[0]  !! size
int_out    !! int_out[0]  !! 1 if success, or 0 if failure
addr_out   !! addr_out[0] !! Return value
addr_out+4 !! addr_out[1] !! ret_size
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node proc_malloc

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)Process memory allocation(!ldouble) - Allocate memory

!item [AES-Nummer:]
64

!item [Deklaration:]
void *proc_malloc ( int32_t size, int32_t *ret_size );

!item [Beschreibung:]
The call proc_malloc allocates a memory block of (!I)size(!i) bytes.

!item [Ergebnis:]
The function returns a pointer to the allocated memory block, or 0
if failed. (!I)ret_size(!i) is filled with either the size of the
allocated memory block, or with the maximum available size.

!item [Verf(!uumlaut)gbar:]
The function is only available under (!nolink [GEM XM]) and FreeGEM/XM.

!item [Gruppe:]
Prozessverwaltung

!item [Querverweis:]
(!link [Binding] [Bindings f(!uumlaut)r proc_malloc]) ~ proc_mfree ~
proc_setblock ~ proc_shrink

(!ende_liste)



!begin_node Bindings f(!uumlaut)r proc_malloc
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void *proc_malloc ( int32_t size, int32_t *ret_size );

!item [Umsetzung:]
!begin_verbatim
void *proc_malloc (int32_t size, int32_t *ret_size)
{
   addr_in[0] = size;

   crys_if(64);

   *ret_size = addr_out[1];

   return ( addr_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 64    # Opcode der Funktion
control+2 !! control[1] !! 0     # Eintr(!aumlaut)ge in int_in
control+4 !! control[2] !! 1     # Eintr(!aumlaut)ge in int_out
control+6 !! control[3] !! 1     # Eintr(!aumlaut)ge in addr_in
control+8 !! control[4] !! 2     # Eintr(!aumlaut)ge in addr_out
addr_in    !! addr_in[0]  !! size
int_out    !! int_out[0]  !! 1 if success, or 0 if failure
addr_out   !! addr_out[0] !! (!nolink [Return])-Wert
addr_out+4 !! addr_out[1] !! ret_size
!end_table

(!ende_liste)
!end_node
!end_node

!endif
