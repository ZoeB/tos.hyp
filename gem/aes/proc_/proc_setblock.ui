!iflang [english]

!begin_node proc_setblock

(!begin_liste) [Availability]

!item [Name:]
(!rdouble)Process set block(!ldouble) - Shrink channel and create swap file

!item [Opcode:]
67

!item [Syntax:]
int16_t proc_setblock ( int16_t pr_seid );

!item [Description:]
The call proc_setblock reduces the channel size allocated to the process
(!I)pr_seid(!i) to what it is using now by eliminating its free memory,
and creates the swap file used to page it out.

(!B)Note(!b) This function calls proc_shrink(pr_seid, 1, &dummy, &dummy). The
FreeGEM/XM Desktop defines this function as (!nolink [proc_shrink])() with PROC_SHRINK=67
and omit to define a function for opcode 68.
Original sources stated PROC_SETBLOCK=67 (with PID only) and PROC_SHRINK=68
(with extra parameters), as documented here.

!item [(!nolink [Return]) value:]
An error has arisen only if the value 0 is returned.

!item [Availability:]
The function is only available under (!nolink [GEM XM]) and FreeGEM/XM.

!item [Group:]
Process library

!item [See also:]
(!link [Binding] [Bindings for proc_setblock]) ~ proc_malloc ~ proc_mfree ~
proc_shrink

(!ende_liste)



!begin_node Bindings for proc_setblock
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t proc_setblock ( int16_t pr_seid );

!item [Binding:]
!begin_verbatim
int16_t proc_setblock (int16_t pr_seid)
{
   int_in[0]  = pr_seid;
   return ( crys_if(67) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 67    # Function opcode
control+2 !! control[1] !! 1     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 0     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! pr_seid
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node proc_setblock

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)Process set block(!ldouble) - Shrink channel and create swap file

!item [AES-Nummer:]
67

!item [Deklaration:]
int16_t proc_setblock ( int16_t pr_seid );

!item [Beschreibung:]
The call proc_setblock reduces the channel size allocated to the process
(!I)pr_seid(!i) to what it is using now by eliminating its free memory,
and creates the swap file used to page it out.

(!B)Note(!b) This function calls proc_shrink(pr_seid, 1, &dummy, &dummy). The
FreeGEM/XM Desktop defines this function as (!nolink [proc_shrink])() with PROC_SHRINK=67
and omit to define a function for opcode 68.
Original sources stated PROC_SETBLOCK=67 (with PID only) and PROC_SHRINK=68
(with extra parameters), as documented here.

!item [Ergebnis:]
An error has arisen only if the value 0 is returned.

!item [Verf(!uumlaut)gbar:]
The function is only available under (!nolink [GEM XM]) and FreeGEM/XM.

!item [Gruppe:]
Prozessverwaltung

!item [Querverweis:]
(!link [Binding] [Bindings f(!uumlaut)r proc_setblock]) ~ proc_malloc ~
proc_mfree ~ proc_shrink

(!ende_liste)



!begin_node Bindings f(!uumlaut)r proc_setblock
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t proc_setblock ( int16_t pr_seid );

!item [Umsetzung:]
!begin_verbatim
int16_t proc_setblock (int16_t pr_seid)
{
   int_in[0]  = pr_seid;
   return ( crys_if(67) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 67    # Opcode der Funktion
control+2 !! control[1] !! 1     # Eintr(!aumlaut)ge in int_in
control+4 !! control[2] !! 1     # Eintr(!aumlaut)ge in int_out
control+6 !! control[3] !! 0     # Eintr(!aumlaut)ge in addr_in
control+8 !! control[4] !! 0     # Eintr(!aumlaut)ge in addr_out
int_in    !! int_in[0]  !! pr_seid
int_out   !! int_out[0] !! (!nolink [Return])-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
