!iflang [english]

!begin_node proc_shrink

(!begin_liste) [Availability]

!item [Name:]
(!rdouble)Process shrink(!ldouble) - Shrink channel

!item [Opcode:]
68

!item [Syntax:]
int16_t proc_shrink ( int16_t pr_shid, int16_t createswap, void *address, int32_t *size );

!item [Description:]
The call proc_shrink reduces the size of the channel allocated to the process
(!I)pr_shid(!i) to what it is using now by eliminating its free memory, and
optionally creates the swap file used to page it out if (!I)createswap(!i) is
set to 1.

(!B)Note:(!b) This function is not used by FreeGEM/XM Desktop. On this
environment, the function with opcode 67 is called proc_shrink and there
is no binding for opcode 68.

!item [(!nolink [Return]) value:]
An error has arisen only if the value 0 is returned. On success, this function
returns the new (!I)size(!i) and (!I)address(!i) of the channel.

!item [Availability:]
The function is only available under (!nolink [GEM XM]).

!item [Group:]
Process library

!item [See also:]
(!link [Binding] [Bindings for proc_shrink]) ~ proc_malloc ~ proc_mfree ~
proc_setblock

(!ende_liste)



!begin_node Bindings for proc_shrink
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t proc_shrink ( int16_t pr_shid, int16_t createswap, void *address, int32_t *size );

!item [Binding:]
!begin_verbatim
int16_t proc_shrink (int16_t pr_shid, int16_t createswap, void *address, int32_t *size)
{
   int_in[0]  = pr_shid;
   int_in[1]  = createswap;

   crys_if(68);
 
   *address = addr_out[0];
   *size    = addr_out[1];

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control    !! control[0]    !! 68    # Function opcode
control+2  !! control[1]    !! 2     # Entry in int_in
control+4  !! control[2]    !! 1     # Entry in int_out
control+6  !! control[3]    !! 0     # Entry in addr_in
control+8  !! control[4]    !! 2     # Entry in addr_out
int_in     !! int_in[0]     !! pr_shid
int_in+2   !! int_in[1]     !! createswap
int_out    !! int_out[0]    !! Return value
addr_out   !! addr_out[0]   !! address
addr_out+4 !! addr_out[1]   !! size

!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node proc_shrink

(!begin_liste) [Beschreibung]

!item [Name:]
(!rdouble)Process shrink(!ldouble) - Shrink channel

!item [AES-Nummer:]
68

!item [Deklaration:]
int16_t proc_shrink ( int16_t pr_shid, int16_t createswap, void *address, int32_t *size );

!item [Beschreibung:]
The call proc_shrink reduces the size of the channel allocated to the process
(!I)pr_shid(!i) to what it is using now by eliminating its free memory, and
optionally creates the swap file used to page it out if (!I)createswap(!i) is
set to 1.

(!B)Note:(!b) This function is not used by FreeGEM/XM Desktop. On this
environment, the function with opcode 67 is called proc_shrink and there
is no binding for opcode 68.

!item [Ergebnis:]
An error has arisen only if the value 0 is returned. On success, this function
returns the new (!I)size(!i) and (!I)address(!i) of the channel.

!item [Verf(!uumlaut)gbar:]
The function is only available under (!nolink [GEM XM]).

!item [Gruppe:]
Prozessverwaltung

!item [Querverweis:]
(!link [Binding] [Bindings f(!uumlaut)r proc_shrink]) ~ proc_malloc ~
proc_mfree ~ proc_setblock

(!ende_liste)



!begin_node Bindings f(!uumlaut)r proc_shrink
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t proc_shrink ( int16_t pr_shid, int16_t createswap, void *address, int32_t *size );

!item [Umsetzung:]
!begin_verbatim
int16_t proc_shrink (int16_t pr_shid, int16_t createswap, void *address, int32_t *size)
{
   int_in[0]  = pr_shid;
   int_in[1]  = createswap;

   crys_if(68);
 
   *address = addr_out[0];
   *size    = addr_out[1];

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 68    # Opcode der Funktion
control+2 !! control[1] !! 2     # Eintr(!aumlaut)ge in int_in
control+4 !! control[2] !! 1     # Eintr(!aumlaut)ge in int_out
control+6 !! control[3] !! 0     # Eintr(!aumlaut)ge in addr_in
control+8 !! control[4] !! 2     # Eintr(!aumlaut)ge in addr_out
int_in     !! int_in[0]     !! pr_shid
int_in+2   !! int_in[1]     !! createswap
int_out    !! int_out[0]    !! (!nolink [Return])-Wert
addr_out   !! addr_out[0]   !! address
addr_out+4 !! addr_out[1]   !! size
!end_table

(!ende_liste)
!end_node
!end_node

!endif
