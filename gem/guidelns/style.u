!iflang [english]

!include gem/guidelns/style_en.u

!else

!begin_node Drei wichtige Programmierregeln
!html_name guidelines_rules

Da das Betriebssystem TOS relativ sauber in mehrere Schichten gegliedert
ist, sollten alle Programmierer bei der Erstellung einer Applikation die
folgenden drei Regeln im Hinterkopf behalten:

!begin_itemize
!item (!B)Niemals(!b) f(!uumlaut)r eine Aufgabe Aufrufe verschiedener
Betriebssystemschichten vermischen. Beispiel: In GEM-Programmen werden Maus
und Tastatur per AES abgefragt, und nicht etwa (!uumlaut)ber das BIOS. Die Mi(!sharps)achtung
dieser Regel kann zu Konflikten zwischen den verschiedenen Schichten f(!uumlaut)hren.
!item (!B)Niemals(!b) von irgendwelchen unsicheren Annahmen (!uumlaut)ber interne
Zusammenh(!aumlaut)nge zwischen den einzelnen Schichten ausgehen. Beispiel: Ein
GEMDOS Laufwerk kann sowohl auf einem (!nolink [BIOS])- als auch auf einem MetaDOS
Ger(!aumlaut)t liegen. Die Maus h(!aumlaut)ngt normalerweise am Tastaturchip, sie muss es aber
nicht (neue Hardware, Tastaturinterfaces etc.)
!item (!B)Immer(!b) nach M(!oumlaut)glichkeit die h(!oumlaut)chste Betriebssystemschicht f(!uumlaut)r
eine Aufgabe benutzen. Beispiel: Die zu benutzende Sprache k(!oumlaut)nnte zwar aus
dem Betriebssystemheader ermittelt werden, besser ist es jedoch, hierf(!uumlaut)r
den (!link [_AKP][Cookie, _AKP])-Cookie bzw. die Funktion appl_getinfo zu benutzen.
!end_itemize

(!B)Dar(!uumlaut)ber hinaus existieren viele weitere Programmierregeln, die
eigentlich bekannt sein sollten, aber leider immer noch nicht von allen
Applikationen beachtet werden. Einige Beispiele:(!b)

!begin_itemize
!item Nur soviel Speicherplatz belegen wie unbedingt n(!oumlaut)tig ist, damit in
einer Multitasking-Umgebung auch noch andere Prozesse gestartet werden bzw.
sinnvoll arbeiten k(!oumlaut)nnen.
!item Den Eintritt in den Supervisor-Modus so oft wie nur m(!oumlaut)glich
(!I)vermeiden(!i), da er eigentlich nur f(!uumlaut)r das Betriebssystem gedacht ist,
und in vielen Umgebungen (!I)kein(!i) Task-Switching stattfindet, wenn sich
ein Prozess in diesem Modus befindet.
!item Niemals direkt in den Bildschirmspeicher schreiben, sondern
stattdessen auf die jeweiligen (!nolink [GEM])-Funktionen ((!nolink [AES]), 
(!nolink [VDI])) zur(!uumlaut)ckgreifen.
!item Niemals auf Speicher zugreifen der nicht dem eigenen Programm geh(!oumlaut)rt,
oder f(!uumlaut)r dieses zug(!aumlaut)nglich gemacht worden ist, da es in Systemen mit
Speicherschutz sonst zu einer Exception kommt. Ferner sollte Speicher immer
so alloziert werden, da(!sharps) andere Prozesse m(!oumlaut)glichst (!I)nicht(!i) auf diesen
zugreifen k(!oumlaut)nnen.
!end_itemize
!end_node


!begin_node Style-Guidelines
!label Guidelines, Style-
!html_name guidelines_styles

Wenn man mehrere (!nolink [GEM])-Applikationen der gleichen Kategorie betrachtet, so 
f(!aumlaut)llt auf, da(!sharps) einige Programme leicht und andere wiederum sehr schwer zu
bedienen sind. Eine Textverarbeitung wie z.B. (!I)Papyrus(!i) d(!uumlaut)rfte
sicherlich von den meisten Anwendern problemlos zu bedienen sein; ganz im
Gegensatz zu Programmen wie (!I)Signum!2(!i), das vielen Benutzern den
Angstschwei(!sharps) auf die Stirn treibt.

Ob ein Programm leicht zu bedienen ist, h(!aumlaut)ngt in hohem Ma(!sharps)e von der
Gestaltung der Benutzerschnittstelle ab. Dieses Kapitel versucht einige Tips
zur Gestaltung des User-Interfaces zu geben, und behandelt die folgenden
Punkte bzw. Aspekte:

!begin_itemize !compressed
!item Dialogboxen
!item Hilfesysteme
!item Mausklicks und Formen
!item Men(!uumlaut)s und Men(!uumlaut)zeilen
!item Optische und akustische R(!uumlaut)ckmeldungen
!item Selektionen
!item Spezialeffekte
!item Tastaturbelegung
!item Toolboxen
!end_itemize

Allen Software-Entwicklern wird dringend empfohlen, den hier gemachten
Empfehlungen Folge zu leisten bzw. sich an vorbildlichen GEM-Applikationen
zu orientieren. Die Akzeptanz eines Programms (und damit der
Verkaufserfolg) h(!aumlaut)ngt neben der Funktionalit(!aumlaut)t zu einem gro(!sharps)en Teil von der
Gestaltung der Benutzerschnittstelle ab.

Beispiele f(!uumlaut)r Fehler im GUI-Design bzw. eine schlechte Benutzerf(!uumlaut)hrung
findet man unter http://www.iarchitect.com/mshame.htm.

Querverweis: AES ~  VDI  ~ (!link [GDOS][Das GDOS])

!begin_node Dialogboxen
!label Dialogboxen, Gestaltung von

Bei der Gestaltung der Dialogboxen sollte ein Software-Entwickler auf eine
innere und (!aumlaut)u(!sharps)ere Konsistenz achten, d.h. er sollte sich an vorbildlichen
Dialogboxen anderer Programme orientieren ((!aumlaut)u(!sharps)ere Konsistenz), und darauf
achten, da(!sharps) innerhalb seiner Anwendung die Dialogboxen ein einheitliches
Outfit erhalten (innere Konsistenz).

!label Dialogboxen, Design-Regeln f(!uumlaut)r
(!B)Die folgende Liste nennt beispielhaft einige Aspekte, die beim Design
von Dialogboxen beachtet werden sollten:(!b)

!begin_itemize
!item gleicher Aufbau aller Dialogboxen der Applikation
!item m(!oumlaut)glichst gleicher Aufbau der Dialogboxen aller Applikationen
!item jeder Dialog sollte eine in sich abgeschlossene Teilaufgabe behandeln
!item f(!uumlaut)r gleiche Aktionen einheitliche Buttons verwenden
!item Informationen in logische Bl(!oumlaut)cke aufspalten
!item (!uumlaut)berfl(!uumlaut)ssige Informationen weglassen
!item nicht zu viele Objekte auf einer Ebene verwenden
!item aktivierbare Elemente deutlich von Anzeigen trennen
!item (!nolink [Spezialeffekte]) und Farben sehr (!uumlaut)berlegt und sparsam einsetzen
!end_itemize

Dar(!uumlaut)ber hinaus sollte man sich genau (!uumlaut)berlegen, welche Art von Dialog f(!uumlaut)r
welchen Zweck eingesetzt wird. Hier lassen sich die folgenden Dialogarten
unterscheiden:

!label Dialogboxen, Alert-
!label Alertboxen
!image (!picture_path)img2045
(!B)Alertboxen(!b) werden eingesetzt, um den Benutzer (!uumlaut)ber wichtige
Ereignisse zu informieren, oder um R(!uumlaut)ckfragen an ihn zu stellen. Sie
informieren in knapper Form (!uumlaut)ber den Sachverhalt, und bieten ggfs. mehrere
Alternativen, um auf diesen zu reagieren. Die Abbildung oben zeigt eine
Alertbox, die zur aktiven Unterst(!uumlaut)tzung von Multitasking in ein Fenster
gelegt wurde.

!label Dialogboxen, modale
!label Modale Dialogboxen
!image (!picture_path)img2044
(!B)Modale Dialogboxen(!b) sollten immer dann benutzt werden, wenn der
Benutzer zu einer sofortigen Aktion gezwungen werden mu(!sharps) bzw. soll. Der
Anwender kann erst dann in der Applikation weiterarbeiten, wenn er den
entsprechenden Dialog verlassen hat. Die Abbildung oben zeigt eine modale
Dialogbox, die zur aktiven Unterst(!uumlaut)tzung von Multitasking in ein Fenster
gelegt wurde. Modale (!nolink [Fensterdialoge]) k(!oumlaut)nnen vom Benutzer anhand des
(!B)fehlenden Closers(!b) der Fensterkomponenten erkannt werden.

!label Dialogboxen, unmodale
!label Unmodale Dialogboxen
!image (!picture_path)img2043
(!B)Unmodale Dialogboxen(!b) sollten eingesetzt werden, wann immer dies
m(!oumlaut)glich ist. Ein solcher Dialog existiert wie ein Fenster parallel zum
eigentlichen Programm, und bietet dem Anwender ein Maximum an Flexibilit(!aumlaut)t.
Die Abbildung oben zeigt eine nicht-modale Dialogbox, die zur aktiven
Unterst(!uumlaut)tzung von Multitasking in ein Fenster gelegt wurde. Nicht-modale
(!nolink [Fensterdialoge]) k(!oumlaut)nnen vom Benutzer anhand des (!B)Closer in den
Komponenten(!b) des Fensters erkannt werden.

(!B)Wichtig:(!b) Damit in einer Multitasking-Umgebung alle Applikationen zu
jeder Zeit ungehindert Ausgaben auf dem Bildschirm t(!aumlaut)tigen k(!oumlaut)nnen, sollten
die Alert- und Dialogboxen eines Programms unbedingt in Fenster gelegt
werden. Einige Applikationen (z.B. der Resource-Editor (!I)Interface(!i)) erlauben
es, jederzeit zwischen konventionellen Dialogen und Fensterdialogen
umzuschalten; diese M(!oumlaut)glichkeit sollte jedoch nur dann angeboten werden,
wenn es wirklich notwendig ist. Im Hinblick auf zuk(!uumlaut)nftige bzw. bereits
bestehende, Multitasking-f(!aumlaut)hige TOS-Versionen, werden koventionelle Dialoge
nur noch eine untergeordnete Rolle spielen.

Querverweis: AES  ~ Fensterdialoge ~  (!link [Formulare][Formularfunktionen])

!end_node


!begin_node Hilfesysteme

Mit steigender Komplexit(!aumlaut)t einer Software steigt auch die Notwendigkeit
der aktiven Anwenderunterst(!uumlaut)tzung, durch ein (!uumlaut)berlegt implementiertes
Hilfesystem.

!image (!picture_path)img2042

Neben der (!I)Entlastung des Langzeitged(!aumlaut)chtnisses(!i) sollte solch ein
System dem Anwender die 4 folgenden Fragen beantworten:

!begin_itemize !compressed
!item (!B)Wo bin ich?(!b)
!item (!B)Was kann ich hier tun?(!b)
!item (!B)Wie kam ich hierhin?(!b)
!item (!B)Wo kann ich hin, und wie komme ich dorthin?(!b)
!end_itemize
 
Ein sehr gutes Hilfesystem bietet die relationale Datenbank (!I)Phoenix(!i)
der Firma Application Systems Heidelberg ((!aumlaut)hnliches bieten auch
(!I)Pure-C(!i), (!I)Grismo(!i) oder der (!I)ST-Guide(!i)).
!label Hilfesystems, Funktionsweise des

Prinzipiell arbeitet solch ein System wie folgt: Die gew(!uumlaut)nschten
Informationen werden in einem Fenster angezeigt, und durch optisch
hervorgehobene (!B)Querverweise(!b) lassen sich per Mausklick jederzeit
weitere Informationen zu bestimmten Themen ermitteln. (!Uumlaut)ber ein
(!nolink [Inhaltsverzeichnis]) ist es m(!oumlaut)glich wie in einem Buch zu bestimmten Themen zu
springen, ein Index erm(!oumlaut)glicht die gezielte Suche einer bestimmten Information.
!label Hilfe, kontext-sensitive
!label Kontext-Sensitive Hilfe
Bew(!aumlaut)hrt hat sich vor allem die (!B)kontext-sensitive Hilfe(!b):
Hierunter versteht man eine Hilfestellung, die sich auf die augenblickliche
Situation bezieht.

Ist beispielsweise ein Fenster oder eine Dialogbox ge(!oumlaut)ffnet, so erscheint
beim Aufruf des Hilfesystems eine Erkl(!aumlaut)rung zu genau diesem Fenster bzw.
!label Hilfesystem, Anforderungen ans dieser Dialogbox.
(!B)Bei der Entwicklung eines Hilfesystems f(!uumlaut)r eine
Applikation sollten die folgenden Punkte ber(!uumlaut)cksichtigt werden:(!b)

!begin_itemize
!item in (!I)jeder(!i) Dialogbox sollte sich ein Hilfe-Knopf befinden, bei
dessen Bet(!aumlaut)tigung Informationen (!uumlaut)ber genau diesen Dialog erscheinen.
!item in (!I)jeder(!i) Fehlermeldung sollte sich ein Hilfe-Knopf befinden,
bei dessen Bet(!aumlaut)tigung dem Benutzer erkl(!aumlaut)rt werden soll, warum der Fehler
aufgetreten ist, und wie er sich beheben l(!aumlaut)(!sharps)t.
!item ist ein Fenster der Applikation (und keine Dialogbox) ge(!oumlaut)ffnet, so mu(!sharps)
zu diesem Fenster eine Hilfemeldung ausgegeben werden. In diesem
Zusammenhang sei darauf hingewiesen, da(!sharps) auch die Funktionsweise des
Hilfesystems selbst erkl(!aumlaut)rt werden mu(!sharps).
!item falls keine Fenster bzw. (!nolink [Dialogboxen]) ge(!oumlaut)ffnet sind, und auch keine
Objekte (z.B. Icons) der Applikation selektiert sind, so sollte eine
generelle Hilfe zum Programm selbst eingeblendet werden.
!end_itemize

!image (!picture_path)img2041
Jeder Hilfetext sollte mindestens die folgenden Informationen beinhalten:

!begin_itemize
!item auf welches Objekt bezieht sich die Hilfe (Fenster, Dialogbox, Icon
etc.) ?
!item welche Aktionen k(!oumlaut)nnen an bzw. mit diesem Objekt ausgef(!uumlaut)hrt werden?
!end_itemize

!label Hilfesystemen, Mut zu
Die von vielen Software-Entwicklern ge(!aumlaut)u(!sharps)erte Angst, durch ein zu gutes
Hilfesystem das (!B)Raubkopieren(!b) zu unterst(!uumlaut)tzen, ist zwar
verst(!aumlaut)ndlich, sollte aber nicht auf Kosten der ehrlichen Anwender
ausgetragen werden.

Querverweis: AES ~  Fensterverwaltung

!end_node


!begin_node Mausklicks und Formen

Auch ein relativ unscheinbares Objekt wie der Mauszeiger hat in einem System
mit grafischer Benutzeroberfl(!aumlaut)che eine wichtige Bedeutung. Sowohl die Anzahl
der Mausklicks, als auch die Form des Mauszeigers sind f(!uumlaut)r den Anwender
eines Programms von besonderem Interesse.

Es hat sich eingeb(!uumlaut)rgert, je nach auszuf(!uumlaut)hrender Operation dem Mauszeiger
eine bestimmte Form zuzuordnen; im einzelnen:

!label Mausformen
!label Mausform, Bedeutung der
!begin_table [l|l]
Form des Mauszeigers !! Bedeutung
!hline
Pfeil !! allgemeine Bedienung (Regelfall)
Balken !! Texteingabe
Biene bzw. Sanduhr !! der Computer ist mit einer Operation besch(!aumlaut)ftigt,
~                  !! und der menschliche Benutzer kann w(!aumlaut)hrend der
~                  !! Ausf(!uumlaut)hrung dieser Aktion nichts machen
Zeigefinger !! Auswahl oder Dimensionierung
flache Hand !! Verschieben oder positionieren von Objekten
Fadenkreuz, d(!uumlaut)nn !! Zeichnen oder Auswahl
Fadenkreuz, dick !! keine feste Bedeutung
Fadenkreuz, Umri(!sharps) !! keine feste Bedeutung
!end_table

Dar(!uumlaut)ber hinaus l(!aumlaut)(!sharps)t sich der Mauszeiger auch komplett abschalten; dies ist
z.B. bei der Ausf(!uumlaut)hrung von Zeichenoperationen sinnvoll, um Pixelm(!uumlaut)ll zu
vermeiden. In besonderen F(!aumlaut)llen kann die Form des Mauszeigers auch frei
definiert werden; dabei sollte die neue Form des Mauszeigers allerdings
immer zur jeweiligen Situation passen.

!label Mausform, Faustregel f(!uumlaut)r
(!B)Als Faustregel gilt, da(!sharps) der Mauszeiger au(!sharps)erhalb des Arbeitsbereiches
des eigenen Fensters immer die Form eines Pfeils besitzen sollte.(!b)

Auch (!uumlaut)ber die (!B)Anzahl der Mausklicks(!b) gibt es einiges zu berichten.
Ein einfacher Klick dient i.a. dazu, bestimmte Elemente auszuw(!aumlaut)hlen. Das
k(!oumlaut)nnten Elemente einer Dialogbox (Checkboxen, Radiobuttons, etc.), Icons auf
dem Desktop einer Shell, aber auch die Komponenten eines Fensters sein. In
vielen F(!aumlaut)llen lassen sich (!uumlaut)ber einen einfachen Klick weitere Aktionen
ausl(!oumlaut)sen. Wird der Mausknopf beispielsweise nicht losgelassen, so k(!oumlaut)nnen
Objekte wie Icons verschoben werden, oder es l(!aumlaut)(!sharps)t sich eine ganze Gruppe
von Objekten ausw(!aumlaut)hlen, d.h. selektieren.

!label Doppelklick
!label Klick, Doppel-
Ein (!B)Doppelklick(!b) leitet meist eine spezielle Operation ein; der
Desktop startet beispielsweise ein Programm, wenn auf das zugeh(!oumlaut)rige
Sinnbild doppelt geklickt wird.
!label Klicks, Mehrfach-
!label Mehrfach-Klicks
Prinzipiell stehen neben dem Einfach- und Doppelklick auch (!B)Drei- oder
Vierfachklicks(!b) mit der Maus zur Verf(!uumlaut)gung. Von diesen Varianten ist
jedoch dringend abzuraten, da es vielen Menschen erhebliche Probleme
bereiten d(!uumlaut)rfte, innerhalb eines bestimmten Zeitintervalls die entsprechende
Anzahl von Mausklicks auszuf(!uumlaut)hren.

!label Mausklick und Tastatur
Last but not least lassen sich (!B)Mausklicks(!b) auch (!B)in Zusammenhang
mit der Tastatur(!b) (Alternate, Control, Shift) einsetzen. Ein Mausklick in
Verbindung mit einer Shift-Taste sorgt i.a. daf(!uumlaut)r, da(!sharps) weitere Objekte
ausgew(!aumlaut)hlt werden k(!oumlaut)nnen. Die Shell (!I)Gemini(!i) (!oumlaut)ffnet bei einem
Doppelklick auf ein Icon und gleichzeitig gedr(!uumlaut)ckter Alternate-Taste, ein
Fenster mit dem zu diesem Icon geh(!oumlaut)renden Verzeichnis.

Querverweis: graf_mouse
!end_node


!begin_node Men(!uumlaut)s und Men(!uumlaut)zeilen
!label Men(!uumlaut)s, Gestaltung von

Die Gestaltung der Men(!uumlaut)s ist in hohem Ma(!sharps)e mitverantwortlich f(!uumlaut)r die
(!Uumlaut)bersichtlichkeit und Benutzerfreundlichkeit einer Applikation. Deshalb
sollte sich jeder Software-Entwickler gen(!uumlaut)gend Zeit nehmen, um diese
sinnvoll und ansprechend zu gestalten.

!label Kurzzeitged(!aumlaut)chtnis, Kapazit(!aumlaut)t des
Wie bereits erw(!aumlaut)hnt ist die (!B)Kapazit(!aumlaut)t des Kurzzeitged(!aumlaut)chtnisses(!b)
beschr(!aumlaut)nkt. Aus diesem Grund sollte eine Men(!uumlaut)zeile m(!oumlaut)glichst nicht mehr als
sieben Men(!uumlaut)-Punkte anbieten; anderenfalls mu(!sharps) ein Benutzer mehrere Male auf
die Men(!uumlaut)zeile blicken, um entscheiden zu k(!oumlaut)nnen, welche Auswahl er treffen
will. Die folgende Abbildung zeigt die Hauptmen(!uumlaut)zeile des relationalen
Datenbanksystems (!I)Phoenix(!i):

!begin_preformatted !inside
     MANAGER  Datei  Bearbeiten  Proze(!sharps)  Parameter  Optionen  Hilfe
!end_preformatted

!label Men(!uumlaut)zeile, Standardaufbau der
Sowohl die Men(!uumlaut)zeile als auch die darin enthaltenen Men(!uumlaut)s sollten einen
(!B)Standardaufbau(!b) besitzen, damit sich ein Anwender nach dem Starten
eines Programms sofort "heimisch" f(!uumlaut)hlt. Das erste Men(!uumlaut) von links sollte
stets den (!I)Namen der aktuellen Applikation(!i) tragen; dies hat in einer
Multitasking-Umgebung den unsch(!aumlaut)tzbaren Vorteil, durch einen kurzen Blick
auf die Men(!uumlaut)zeile die aktive Applikation identifizieren zu k(!oumlaut)nnen.

!image (!picture_path)img2040

Der zweite Men(!uumlaut)titel sollte immer den Namen (!I)Datei(!i) besitzen, und
Men(!uumlaut)punkte anbieten, die sich mit verschiedenen Aspekten der Ein- und
Ausgabe befassen. Der unterste Eintrag in diesem Men(!uumlaut) sollte stets die
M(!oumlaut)glichkeit bieten, das Programm zu verlassen.
!label Men(!uumlaut)s, Untergruppen in
Wie man in der obenstehenden
Abbildung sieht, k(!oumlaut)nnen einzelne Eintr(!aumlaut)ge innerhalb eines Men(!uumlaut)s zu
(!B)logischen Untergruppen(!b) zusammengefa(!sharps)t werden, was erheblich zur
(!uumlaut)bersichtlichkeit und Akzeptanz durch den Benutzer beitr(!aumlaut)gt.

Um unn(!oumlaut)tige Handbewegungen zwischen Tastatur und Maus zu verhindern, sollte
jeder Men(!uumlaut)punkt auch durch eine (!B)Tastenkombination (Shortcut)(!b)
aufgerufen werden k(!oumlaut)nnen. Es handelt sich dabei meist um Control- bzw.
Alternate-Sequenzen, die am rechten Rand eines Men(!uumlaut)s angezeigt werden
sollten, und dabei mindestens ein Leerzeichen Abstand zum eigentlichen
Eintrag bieten. Dieser wiederum beginnt immer zwei Zeichen vom linken 
und eines vom rechten Rand entfernt, um genug Platz f(!uumlaut)r ein H(!aumlaut)kchen zu
bieten.
!label Men(!uumlaut)s, Drei Punkte in
Dabei spielt es keine Rolle, ob (!uumlaut)berhaupt ein solches angezeigt
werden soll oder nicht. (!B)Drei Punkte(!b) hinter einem Men(!uumlaut)punkt deuten
an, da(!sharps) sich nach Auswahl dieses Eintrags eine Dialogbox (oder der
Fileselektor) (!oumlaut)ffnet. Der Benutzer kann sich dann darauf einstellen, und
z.B. den Mauszeiger schon in die Mitte des Bildschirms bewegen, w(!aumlaut)hrend der
Dialog aufgebaut wird.

Weitere und oft benutzte Men(!uumlaut)titel sind (!I)Bearbeiten, Parameter,
Optionen(!i) und (!I)Hilfe(!i). Ersterer befindet sich stets rechts vom
!label Men(!uumlaut)titeln, Abgrenzung von
Datei-Men(!uumlaut), letzterer sollte immer am rechten Ende einer Men(!uumlaut)zeile plaziert
werden. Jeder (!nolink [Titel]) sollte mit einem Gro(!sharps)buchstaben beginnen (der ganz links
stehende Name des Programms wird komplett in Gro(!sharps)buchstaben angegeben), aus
nur einem Wort bestehen, und als (!B)Abgrenzung zu den anderen Titeln(!b)
je ein Leerzeichen nach links und rechts enthalten.

!label Men(!uumlaut)s, kontext-sensitive
!label Kontext-Sensitive Men(!uumlaut)s
Dar(!uumlaut)ber hinaus sollte man Men(!uumlaut)eintr(!aumlaut)ge immer (!B)kontext-sensitiv
gestalten(!b), d.h. ein Eintrag darf nur dann anw(!aumlaut)hlbar sein, wenn dies in
der aktuellen Situation des Programms m(!oumlaut)glich bzw. sinnvoll ist. So macht es
beispielsweise keinen Sinn, den Men(!uumlaut)eintrag (!I)Speichern(!i) aufzurufen,
wenn es nichts zu speichern gibt. Gleiches gilt auch f(!uumlaut)r einen Eintrag
(!I)Schlie(!sharps)en(!i), der nur dann anw(!aumlaut)hlbar sein sollte, wenn es auch ein
Fenster bzw. einen Dialog gibt, der geschlossen werden kann.

!image (!picture_path)img2039

Von der konventionellen Men(!uumlaut)zeile abgesehen gibt es noch weitere und
interessante M(!oumlaut)glichkeiten, dem Benutzer eine Auswahl zu erm(!oumlaut)glichen. Viele
Programme (z.B. die Shell (!I)Thing(!i) oder (!I)Ease(!i) - vgl. Abbildung) stellen dem
Benutzer (!B)Pop-Up-Men(!uumlaut)s(!b) zur Verf(!uumlaut)gung um schnell zwischen
verschiedenen Alternativen ausw(!aumlaut)hlen zu k(!oumlaut)nnen oder eine Operation
!label Men(!uumlaut)s, Vorteil bei Popup-
!label Popup-Men(!uumlaut)s, Vorteil eines
auszuf(!uumlaut)hren. Der Hauptvorteil eines Pop-Up-Men(!uumlaut)s besteht darin, die
(!B)Mauswege(!b) zu (!B)verk(!uumlaut)rzen(!b). Das Men(!uumlaut) erscheint einfach an der
Bildschirmposition, an der ein Mausklick ausgef(!uumlaut)hrt wird. Bei der
Implementierung von Pop-Up-Men(!uumlaut)s sollte man darauf achten, da(!sharps) diese immer
vollst(!aumlaut)ndig auf dem Bildschirm erscheinen.

!label Men(!uumlaut)s in Fenstern
Last but not least gibt es die M(!oumlaut)glichkeit, eine (!B)Men(!uumlaut)zeile im
Fenster(!b) unterzubringen. Diese Methode bietet verschiedene Vorteile:
erstens l(!aumlaut)(!sharps)t sich auf diese Art und Weise die Hauptmen(!uumlaut)zeile entlasten und
dadurch viel (!uumlaut)bersichtlicher gestalten, zweitens ist es dadurch m(!oumlaut)glich,
eine Applikation viel logischer aufzubauen. Alle Operationen die lokal auf
ein Fenster wirken, wandern in das Fenstermen(!uumlaut), alle anderen in die globale
Men(!uumlaut)zeile.

!image (!picture_path)img2038

!label Men(!uumlaut)s, scrollbare
Da man Fenster nicht nur auf dem Bildschirm verschieben, sondern i.a. auch
in der Gr(!oumlaut)(!sharps)e ver(!aumlaut)ndern kann, ist es m(!oumlaut)glich, da(!sharps) nicht alle (!nolink [Titel]) eines
Fenster-Men(!uumlaut)s sichtbar sind. Einige Programme erlauben es daher, die
Men(!uumlaut)zeile zu (!B)scrollen(!b). Dies ist z.B. beim Texteditor (!I)Grismo(!i),
oder beim Resource Editor (!I)Interface(!i) der Fall.

Querverweis: AES ~  Men(!uumlaut)funktionen
!end_node


!begin_node Optische und akustische R(!uumlaut)ckmeldungen
!label akustische R(!uumlaut)ckmeldungen
!label R(!uumlaut)ckmeldungen, optische
!label R(!uumlaut)ckmeldungen, akustische

Beim Arbeiten am Computer ist der menschliche Benutzer auf optische oder
akustische R(!uumlaut)ckmeldungen angewiesen, um stets das Gef(!uumlaut)hl zu haben, die
auszuf(!uumlaut)hrende Aufgabe zu kontrollieren, bzw. den aktuellen Stand der
Bearbeitung erfassen zu k(!oumlaut)nnen.

Das GEM bietet eine Vielzahl von M(!oumlaut)glichkeiten, dem Anwender ein
Feedbackgef(!uumlaut)hl zu vermitteln. So werden z.B. Men(!uumlaut)titel oder Icons
invertiert, wenn der Benutzer diese mit der Maus selektiert.

(!B)Akustische R(!uumlaut)ckmeldungen(!b) sind besonders im Zusammenhang mit Fehler-,
bzw. Warnmeldungen sinnvoll, die in (!nolink [Dialogboxen]) angezeigt werden k(!oumlaut)nnen.

(!B)Optische R(!uumlaut)ckmeldungen(!b) sind immer dann einzusetzen, wenn der
Benutzer Objekte auf dem Bildschirm selektiert, oder eine Aufgabe mit einer
l(!aumlaut)ngeren Bearbeitungsphase startet. Der Anwender darf niemals dar(!uumlaut)ber im
Unklaren gelassen werden, welche Operation gerade ausgef(!uumlaut)hrt wird, und wie
weit sie fortgeschritten ist. Dabei sind (!B)grafische Kontrollanzeigen(!b)
i.a. den textuellen vorzuziehen, da letztere vom Benutzer erst dekodiert
werden m(!uumlaut)ssen.

!image (!picture_path)img2037

Optische R(!uumlaut)ckmeldungen werden z.B. vom relationalen Datenbanksystem Phoenix
eingesetzt, um den Benutzer (!uumlaut)ber den Stand einer Abfrage zu unterrichten;
die Shell Gemini benutzt diese Methode, um dem Anwender beim Formatieren
von Disketten ein Zeitgef(!uumlaut)hl zu vermitteln, und der Texteditor
(!I)Grismo(!i) invertiert u.a. Querverweise seines Hilfesystems, wenn der
Benutzer diese mit der Maus aktiviert.

Querverweis: AES ~  Style-Guidelines
!end_node


!begin_node Selektionen

Unter einer Selektion versteht man das Ausw(!aumlaut)hlen eines oder mehrerer
Objekte. Auf dem Desktop lassen sich beispielsweise die Dateien eines
Laufwerkfensters per Mausklick, Shift-Mausklick oder durch Aufziehen eines
Gummibandes selektieren.

!image (!picture_path)img2036
Grunds(!aumlaut)tzlich gelten die folgenden Konventionen:

!label Ausw(!aumlaut)hlen per Maus
!label Selektion per Maus
(!B)Mausklick:(!b) Durch einen einfachen Klick mit der Maus wird das
ausgew(!aumlaut)hlte Objekt selektiert; bereits ausgew(!aumlaut)hlte Objekte m(!uumlaut)ssen wieder
deselektiert werden.

!label Ausw(!aumlaut)hlen per Shift-Maus
!label Selektion per Shift-Maus
(!B)Shift-Mausklick:(!b) f(!uumlaut)gt das ausgew(!aumlaut)hlte Objekt in die Menge der
bereits selektierten Objekte ein (bereits ausgew(!aumlaut)hlte Objekte bleiben also
weiterhin selektiert). Durch einen Shift-Mausklick auf ein selektiertes
Objekt wird dieses aus der Menge der ausgew(!aumlaut)hlten Objekte wieder
entfernt.

!label Ausw(!aumlaut)hlen per Gummiband
!label Selektion per Gummiband
(!B)Gummiband:(!b) Durch Aufziehen eines Gummibandes (Rubberbox) werden alle
Objekte die von diesem Band geschnitten werden, selektiert; bereits
ausgew(!aumlaut)hlte Objekte m(!uumlaut)ssen wieder deselektiert werden. Durch Kombination mit
der Shift Taste k(!oumlaut)nnen die betroffenen Objekte in die Menge der ausgew(!aumlaut)hlten
Objekte eingef(!uumlaut)gt werden.

!label Echtzeit-Selektion
!label Selektion, Echtzeit-
Eine besonders angenehme Art der Selektion ist die
(!B)Echtzeit-Selektion(!b). Hierunter versteht man, da(!sharps) der ausgew(!aumlaut)hlte
Bereich bereits w(!aumlaut)hrend der Bewegung des Mauszeigers invertiert wird. Viele
Programme wie (!I)Pure-C(!i), (!I)Gemini(!i) oder (!I)Grismo(!i) nutzen
diese Methode der Selektion, und scrollen dabei sogar automatisch den
Inhalt des Fensters, wenn der Fensterrand erreicht wird.

Querverweis: AES ~  Style-Guidelines
!end_node


!begin_node Spezialeffekte

Beim Einsatz von Farben, Texteffekten etc. ist besondere Vorsicht
angebracht. Hier gilt die zumeist die Devise: (!B)Weniger ist mehr !(!b)

Es kann an dieser Stelle kein Patent-Rezept, sondern nur der Ratschlag
gegeben werden, sich an vorbildlichen Applikationen zu orientieren.
!label Farbe, Subjektivit(!aumlaut)t der
Speziell
bei Verwendung von Farben sollte ein Software-Entwickler immer im Hinterkopf
haben, da(!sharps) das (!B)Farbempfinden eines Menschen(!b) sehr subjektiv ist;
daraus folgt, da(!sharps) es dem Benutzer m(!oumlaut)glich sein sollte, die f(!uumlaut)r ihn
angenehmen Farben einstellen zu k(!oumlaut)nnen.

!image (!picture_path)img2035

Eine vorbildliche Applikation in dieser Hinsicht ist z.B. das relationale
Datenbanksystem Phoenix von Application Systems Heidelberg. Hier l(!aumlaut)(!sharps)t sich
nahezu die gesamte Benutzeroberfl(!aumlaut)che vom Anwender frei konfigurieren.

!label Texteffekten, Einsatz von
In Textdokumenten sollte darauf geachtet werden, nicht zu viele (!nolink [Texteffekte])
gleichzeitig einzusetzen bzw. zu vermischen. Auch hier gilt: (!B)Weniger ist
mehr !(!b) Doch kann diese Aussage auch nicht pauschalisiert werden: Es gibt
F(!aumlaut)lle, in denen der Einsatz mehrerer Effekte zum gleichen Zeitpunkt nicht
nur toleriert werden kann, sondern sogar sinnvoll ist. In einem
(!B)Hypertext(!b)-system beispielsweise m(!uumlaut)ssen (!B)Querverweise(!b) dem
Benutzer besonders deutlich gemacht werden. Auf nahezu allen Plattformen
gilt der Standard, diese Referenzen unterstrichen, und wenn m(!oumlaut)glich,
gleichzeitig auch in Farbe darzustellen. Das hat den Vorteil, da(!sharps)
Textstellen, die einen einfachen Effekt nutzen, trotzdem noch von
Querverweisen unterschieden werden k(!oumlaut)nnen.

Das Fehlen eines Patent-Rezeptes f(!uumlaut)hrt bei vielen Entwicklern zu
Unsicherheit, die darin gipfelt, auf Spezialeffekte bzw. Farbe ganz zu
verzichten. (!B)Das kann jedoch nicht Sinn der Sache sein !(!b) So kann
Farbe, sinnvoll eingesetzt, nicht nur zu erheblich mehr (!Uumlaut)bersichtlichkeit
beitragen, sondern auch die Attraktivit(!aumlaut)t einer Applikation drastisch
erh(!oumlaut)hen.

Lange Rede - kurzer Sinn: Spezialeffekte (gleich welcher Art) sollten sehr
(!uumlaut)berlegt und sparsam eingesetzt werden.

!label User-Testing
!label Testing, User-
Bei der Entwicklung eines
Softwareproduktes tut ein Programmierer gut daran, m(!oumlaut)glichst fr(!uumlaut)h den
Benutzer in seine Arbeit einzubeziehen (!B)(User-Testing)(!b), und sich an
vorbildlichen Programmen zu orientieren. Am sinnvollsten ist es, alle
heiklen Punkte f(!uumlaut)r den Anwender frei konfigurierbar zu machen !

Querverweis: AES ~  Style-Guidelines
!end_node


!begin_node Tastaturbelegung

Da der Mensch ein Gewohnheitstier ist, w(!aumlaut)re es w(!uumlaut)nschenswert, wenn nicht
nur Dialoge und Men(!uumlaut)s m(!oumlaut)glichst einheitlich aufgebaut werden, sondern
die wichtigsten Funktionen eines Programms auch per Tastatur einheitlich
aufgerufen werden k(!oumlaut)nnten. 

!label Shortcuts, Liste der
Tats(!aumlaut)chlich gibt es eine Reihe von Befehlstasten-Kombinationen (Shortcuts)
die entweder fest genormt sind, oder sich aber als quasi Standard etabliert
haben; im einzelnen:

!label Shortcuts, genormte
(!B)Genormt laut Beschlu(!sharps) der Entwicklerkonferenz (August '89):(!b)

!begin_table [l|l]
Tasten-Kombination !! Funktion
!hline
Control-C !! kopieren
Control-F !! suchen
Control-O !! (!oumlaut)ffnen
Control-Q !! Programm beenden
Control-V !! einf(!uumlaut)gen
Control-X !! ausschneiden
Shift-"Pfeil hoch" !! eine Seite zur(!uumlaut)ck bl(!aumlaut)ttern
Shift-"Pfeil runter" !! eine Seite vorw(!aumlaut)rts bl(!aumlaut)ttern
Shift-"Pfeil links" !! Cursor zum Anfang der Zeile
Shift-"Pfeil rechts" !! Cursor an das Ende der Zeile
Control-"Pfeil links" !! um ein Wort zur(!uumlaut)ck
Control-"Pfeil rechts" !! um ein Wort vorw(!aumlaut)rts
Home !! an den Anfang des Dokumentes
Shift-Home (Clr) !! an das Ende des Dokumentes
!end_table

!label Shortcuts, nicht genormte
(!B)Nicht genormt, aber Quasi-Standard:(!b)

!begin_table [l|l]
Tasten-Kombination !! Funktion
!hline
Control-A !! alles ausw(!aumlaut)hlen
Control-G !! n(!aumlaut)chste Fundstelle
Control-M !! Sichern unter...
Control-N !! Neues Dokument
Control-P !! Drucken
Control-S !! Sichern
Control-R !! Ersetzen
Control-U !! Oberstes Fenster schlie(!sharps)en
Control-W !! zum n(!aumlaut)chsten Fenster bl(!aumlaut)ttern
Control-Y !! aktuelle Zeile ausschneiden
Control-Z !! Shell starten
!end_table

!label Shortcuts, reservierte
(!B)Wichtiger Hinweis:(!b) Alle 'Alternate-Control'-Tastenkombinationen
sind f(!uumlaut)r das Betriebssystem reserviert. Als Beispiele seien an dieser
Stelle genannt:

!label Iconify, Shortcuts f(!uumlaut)r
!begin_table [l|l]
Tasten-Kombination !! Funktion
!hline
Alternate-Control-(!nolink [Tab]) !! Taskwechsel unter MagiC
Alternate-Control-Delete !! Shut-Down-Sequenz starten
Alternate-Control-Esc !! Programm-Manager unter (!nolink [MagiC])
Alternate-Control-Space !! aktuelles Fenster ikonifizieren
dto. jedoch mit Shift !! Applikation ikonifizieren
!end_table

Querverweis:
(!link [Bedienung des Fileselektors][Die Bedienung des File-Selektors ab MagiC 4])  ~
ASCII-Tabelle ~
(!link [Scan-Code Tabelle][Der Scan-Code])
!end_node


!begin_node Toolboxen

Es kann vorkommen, da(!sharps) der Platz in der Men(!uumlaut)leiste und den (!nolink [Dialogboxen])
einer Applikation nicht ausreicht, um die volle Funktionalit(!aumlaut)t darin
unterzubringen.

Anstatt nun die Men(!uumlaut)leiste zu (!uumlaut)berf(!uumlaut)llen, oder zu viele Informationen in
einen Dialog zu quetschen, sollte man in diesen F(!aumlaut)llen auf eine
Werkzeugleiste (Toolbox) oder (!B)lokale Men(!uumlaut)zeilen(!b) in Fenstern
zur(!uumlaut)ckgreifen.

In nahezu allen F(!aumlaut)llen lassen sich dadurch die entsprechenden Funktionen in
der Benutzerschnittstelle unterbringen, - und dazu noch (!uumlaut)bersichtlich.

Toolboxen werden i.a. am oberen oder rechten Rand eines Fensters
angeboten.

!image (!picture_path)img2034

Lokale Men(!uumlaut)zeilen und Werkzeugleisten werden z.B. vom Resource-Editor
Interface eingesetzt. Es kann n(!uumlaut)tzlich sein, wenn man eine Toolbox
(zumindest kurzfristig) (!B)ausblenden(!b) kann, um so mehr der eigentlich
wichtigen Informationen im Fenster darstellen zu k(!oumlaut)nnen; dies erlaubt
beispielsweise der Texteditor (!I)Grismo(!i).

Querverweis: AES ~  Style-Guidelines
!end_node

!end_node

!endif
