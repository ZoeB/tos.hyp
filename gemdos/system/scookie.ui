!iflang [english]

!begin_node Scookie
(!begin_liste) [Availability]
!item [Name:]
(!rdouble)Scookie(!ldouble) - Cookie jar management.
!item [Opcode:]
330 (0x014a)
!item [Syntax:]
int32_t Scookie ( int16_t action, COOKIE *cookie );

!item [Description:]
The function Scookie permits the management of the cookie jar. The following
apply:
!begin_xlist !compressed [action]
!item [action]
Meaning
!item [~]
~
!item [C_BAKE (0x01)]
(!I)cookie(!i) is a pointer to a cookie you want to install into the cookie jar.
Only root can bake a cookie (or you get EACCDN), and you cannot overwrite an
existing cookie (ELOCKED). (!nl)
Returns 0 for success, or a negative error code
!item [C_GRAB (0x02)]
(!I)cookie(!i) is a pointer to a cookie you want to grab from the cookie jar.
You must supply a cookie with a tag name to look for. If you use a -1 (LONG)
value for the cookie tag, then the first cookie will be returned to you. If
the cookie is found, it will be copied into the cookie pointed to by
(!I)cookie(!i). (!nl)
Returns 0 for success or EFILNF. If you need direct access to the jar, pass -1L
as your (!I)cookie(!i) pointer. This will return a pointer to the jar
!item [C_MORE (0x04)]
Like (!I)C_GRAB(!i) but find the NEXT cookie after the one with a tag like
(!I)cookie(!i)'s. This is so that you can find the entire jar with (!I)C_GRAB(!i)
and (!I)C_MORE(!i). The found cookie is copied into (!I)cookie(!i). The NULL
cookie is copied into (!I)cookie(!i) if (!I)cookie(!i) was the last cookie, or
returns EFILNF if not found. (!nl)
Returns 0 for success (or last cookie)
!item [C_READ (0x08)]
(!I)cookie(!i) should be a LONG tag value to find, NOT a pointer! The returned
value is the value of the cookie indicated, or EFILNF if not found. Use this
when you know the cookie exists, such as "_MCH" since this is faster and easier.
!item [C_SIZE (0x10)]
Returns the number of cookies that are actually in the jar. Use (!I)C_READ,0(!i)
to find out how many cookies can be put in the jar without resizing
!item [C_EAT (0x20)]
(!I)cookie(!i) is the cookie to delete (only need tag value). Only root can eat
cookies (or you get EACCDN). (!nl)
Returns EFILNF if cookie is not found or zero for success.
!end_xlist

!item [(!nolink [Return]) value:]
The return value depends on the parameter (!I)action(!i) (!nl)
In case of invalid action value the function will return EINVFN.

!item [Availability:]
This function is not available, use Ssystem() instead to manage cookies.

(!red)
This function has been disabled as of FreeMiNT 1.12.4. Opcode 330 is now
assigned to (!nolink [Dchroot])().
(!coloff)

!item [Group:]
System functions

!item [See also:] (!link [Binding] [Bindings for Scookie]) ~ Ssystem
(!ende_liste)


!begin_node Bindings for Scookie
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Scookie ( int16_t action, COOKIE *cookie );
!item [Assembler:]
!begin_verbatim
pea       cookie       ; Offset 4
move.w    action,-(sp) ; Offset 2
move.w    #330,-(sp)   ; Offset 0
trap      #1           ; GEMDOS
addq.l    #8,sp        ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node

!else

!begin_node Scookie
(!begin_liste) [Beschreibung]
!item [Name:]
(!rdouble)Scookie(!ldouble) - Cookie jar management.
!item [Gemdosnummer:]
330 (0x014a)
!item [Deklaration:]
int32_t Scookie ( int16_t action, COOKIE *cookie );

!item [Beschreibung:]
The function Scookie permits the management of the cookie jar. The following
apply:
!begin_xlist !compressed [action]
!item [action]
Meaning
!item [~]
~
!item [C_BAKE (0x01)]
(!I)cookie(!i) is a pointer to a cookie you want to install into the cookie jar.
Only root can bake a cookie (or you get EACCDN), and you cannot overwrite an
existing cookie (ELOCKED). (!nl)
Returns 0 for success, or a negative error code
!item [C_GRAB (0x02)]
(!I)cookie(!i) is a pointer to a cookie you want to grab from the cookie jar.
You must supply a cookie with a tag name to look for. If you use a -1 (LONG)
value for the cookie tag, then the first cookie will be returned to you. If
the cookie is found, it will be copied into the cookie pointed to by
(!I)cookie(!i). (!nl)
Returns 0 for success or EFILNF. If you need direct access to the jar, pass -1L
as your (!I)cookie(!i) pointer. This will return a pointer to the jar
!item [C_MORE (0x04)]
Like (!I)C_GRAB(!i) but find the NEXT cookie after the one with a tag like
(!I)cookie(!i)'s. This is so that you can find the entire jar with (!I)C_GRAB(!i)
and (!I)C_MORE(!i). The found cookie is copied into (!I)cookie(!i). The NULL
cookie is copied into (!I)cookie(!i) if (!I)cookie(!i) was the last cookie, or
returns EFILNF if not found. (!nl)
Returns 0 for success (or last cookie)
!item [C_READ (0x08)]
(!I)cookie(!i) should be a LONG tag value to find, NOT a pointer! The returned
value is the value of the cookie indicated, or EFILNF if not found. Use this
when you know the cookie exists, such as "_MCH" since this is faster and easier.
!item [C_SIZE (0x10)]
Returns the number of cookies that are actually in the jar. Use (!I)C_READ,0(!i)
to find out how many cookies can be put in the jar without resizing
!item [C_EAT (0x20)]
(!I)cookie(!i) is the cookie to delete (only need tag value). Only root can eat
cookies (or you get EACCDN). (!nl)
Returns EFILNF if cookie is not found or zero for success.
!end_xlist

!item [Ergebnis:]
The return value depends on the parameter (!I)action(!i) (!nl)
In case of invalid action value the function will return EINVFN.

!item [Verf(!uumlaut)gbar:]
This function is not available, use Ssystem() instead to manage cookies.

(!red)
This function has been disabled as of FreeMiNT 1.12.4. Opcode 330 is now
assigned to (!nolink [Dchroot])().
(!coloff)

!item [Gruppe:]
Systemfunktionen

!item [Querverweis:] (!link [Binding] [Bindings f(!uumlaut)r Scookie]) ~ Ssystem
(!ende_liste)


!begin_node Bindings f(!uumlaut)r Scookie
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Scookie ( int16_t action, COOKIE *cookie );
!item [Assembler:]
!begin_verbatim
pea       cookie       ; Offset 4
move.w    action,-(sp) ; Offset 2
move.w    #330,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #8,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node

!endif
